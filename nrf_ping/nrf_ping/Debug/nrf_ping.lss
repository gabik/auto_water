
nrf_ping.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000059e  00000632  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000059e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080011a  0080011a  0000064c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001404  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000735  00000000  00000000  00001bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008e8  00000000  00000000  00002325  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000031c  00000000  00000000  00002c10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003df  00000000  00000000  00002f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a16  00000000  00000000  0000330b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00003d21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 32       	cpi	r26, 0x20	; 32
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  9e:	0c 94 cd 02 	jmp	0x59a	; 0x59a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <poweroff_led>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	89 ef       	ldi	r24, 0xF9	; 249
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <poweroff_led+0x4>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <poweroff_led+0xa>
  b0:	00 00       	nop
}

void poweroff_led()
{
	_delay_ms(1);
	SEGMENTS_PORT = 0xFF; // + to cathode to power off
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8b b9       	out	0x0b, r24	; 11
	LED_SELECT_PORT &= ~((1<<LED0) | (1<<LED1) | (1<<LED2) | (1<<LED3)); // 0 to LED ports (0 to Anode)
  b6:	88 b1       	in	r24, 0x08	; 8
  b8:	83 7c       	andi	r24, 0xC3	; 195
  ba:	88 b9       	out	0x08, r24	; 8
  bc:	08 95       	ret

000000be <led_screen_init>:
uint8_t digits[16] = {DG0, DG1, DG2, DG3, DG4, DG5, DG6, DG7, DG8, DG9, DGa, DGb, DGc, DGd, DGe, DGf};
uint8_t led_pn[4]  = {LED0, LED1, LED2, LED3};

void led_screen_init()
{
	SEGMENTS_DDR = 0xFF;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	8a b9       	out	0x0a, r24	; 10
	LED_SELECT_DDR |= (1<<LED0) | (1<<LED1) | (1<<LED2) | (1<<LED3);
  c2:	87 b1       	in	r24, 0x07	; 7
  c4:	8c 63       	ori	r24, 0x3C	; 60
  c6:	87 b9       	out	0x07, r24	; 7
	poweroff_led();
  c8:	0e 94 53 00 	call	0xa6	; 0xa6 <poweroff_led>
  cc:	08 95       	ret

000000ce <write_to_led_hex>:
	LED_SELECT_PORT |= (1<<LED3);
	poweroff_led();	
}

void write_to_led_hex(uint8_t hex1, uint8_t hex2, uint16_t loop)
{
  ce:	8f 92       	push	r8
  d0:	9f 92       	push	r9
  d2:	af 92       	push	r10
  d4:	bf 92       	push	r11
  d6:	cf 92       	push	r12
  d8:	df 92       	push	r13
  da:	ef 92       	push	r14
  dc:	ff 92       	push	r15
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	ea 01       	movw	r28, r20
	uint8_t h1, h2, h3, h4;
	h1 = (hex1>>4) & 0b00001111;
  e8:	a8 2e       	mov	r10, r24
  ea:	a6 94       	lsr	r10
  ec:	a6 94       	lsr	r10
  ee:	a6 94       	lsr	r10
  f0:	a6 94       	lsr	r10
	h2 = hex1 & 0b00001111;
  f2:	8f 70       	andi	r24, 0x0F	; 15
	h3 = (hex2>>4) & 0b00001111;
  f4:	e6 2e       	mov	r14, r22
  f6:	e6 94       	lsr	r14
  f8:	e6 94       	lsr	r14
  fa:	e6 94       	lsr	r14
  fc:	e6 94       	lsr	r14
	h4 = hex2 & 0b00001111;
  fe:	6f 70       	andi	r22, 0x0F	; 15
	for (uint16_t i=0 ; i<loop ; i+=4)
 100:	20 97       	sbiw	r28, 0x00	; 0
 102:	a9 f1       	breq	.+106    	; 0x16e <write_to_led_hex+0xa0>
 104:	81 2c       	mov	r8, r1
 106:	91 2c       	mov	r9, r1
	{
		poweroff_led();
		SEGMENTS_PORT = digits[h1];
 108:	2a 2d       	mov	r18, r10
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	a9 01       	movw	r20, r18
 10e:	40 50       	subi	r20, 0x00	; 0
 110:	5f 4f       	sbci	r21, 0xFF	; 255
 112:	5a 01       	movw	r10, r20
		LED_SELECT_PORT |= (1<<LED0);
		
		poweroff_led();
		SEGMENTS_PORT = digits[h2];		
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	fc 01       	movw	r30, r24
 118:	e0 50       	subi	r30, 0x00	; 0
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	6f 01       	movw	r12, r30
		LED_SELECT_PORT |= (1<<LED1);
		
		poweroff_led();
		SEGMENTS_PORT = digits[h3];
 11e:	8e 2d       	mov	r24, r14
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	9c 01       	movw	r18, r24
 124:	20 50       	subi	r18, 0x00	; 0
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	79 01       	movw	r14, r18
		LED_SELECT_PORT |= (1<<LED2);
		
		poweroff_led();
		SEGMENTS_PORT = digits[h4];
 12a:	06 2f       	mov	r16, r22
 12c:	10 e0       	ldi	r17, 0x00	; 0
 12e:	00 50       	subi	r16, 0x00	; 0
 130:	1f 4f       	sbci	r17, 0xFF	; 255
	h2 = hex1 & 0b00001111;
	h3 = (hex2>>4) & 0b00001111;
	h4 = hex2 & 0b00001111;
	for (uint16_t i=0 ; i<loop ; i+=4)
	{
		poweroff_led();
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <poweroff_led>
		SEGMENTS_PORT = digits[h1];
 136:	f5 01       	movw	r30, r10
 138:	80 81       	ld	r24, Z
 13a:	8b b9       	out	0x0b, r24	; 11
		LED_SELECT_PORT |= (1<<LED0);
 13c:	45 9a       	sbi	0x08, 5	; 8
		
		poweroff_led();
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <poweroff_led>
		SEGMENTS_PORT = digits[h2];		
 142:	f6 01       	movw	r30, r12
 144:	80 81       	ld	r24, Z
 146:	8b b9       	out	0x0b, r24	; 11
		LED_SELECT_PORT |= (1<<LED1);
 148:	44 9a       	sbi	0x08, 4	; 8
		
		poweroff_led();
 14a:	0e 94 53 00 	call	0xa6	; 0xa6 <poweroff_led>
		SEGMENTS_PORT = digits[h3];
 14e:	f7 01       	movw	r30, r14
 150:	80 81       	ld	r24, Z
 152:	8b b9       	out	0x0b, r24	; 11
		LED_SELECT_PORT |= (1<<LED2);
 154:	43 9a       	sbi	0x08, 3	; 8
		
		poweroff_led();
 156:	0e 94 53 00 	call	0xa6	; 0xa6 <poweroff_led>
		SEGMENTS_PORT = digits[h4];
 15a:	f8 01       	movw	r30, r16
 15c:	80 81       	ld	r24, Z
 15e:	8b b9       	out	0x0b, r24	; 11
		LED_SELECT_PORT |= (1<<LED3);
 160:	42 9a       	sbi	0x08, 2	; 8
	uint8_t h1, h2, h3, h4;
	h1 = (hex1>>4) & 0b00001111;
	h2 = hex1 & 0b00001111;
	h3 = (hex2>>4) & 0b00001111;
	h4 = hex2 & 0b00001111;
	for (uint16_t i=0 ; i<loop ; i+=4)
 162:	f4 e0       	ldi	r31, 0x04	; 4
 164:	8f 0e       	add	r8, r31
 166:	91 1c       	adc	r9, r1
 168:	8c 16       	cp	r8, r28
 16a:	9d 06       	cpc	r9, r29
 16c:	10 f3       	brcs	.-60     	; 0x132 <write_to_led_hex+0x64>
		
		poweroff_led();
		SEGMENTS_PORT = digits[h4];
		LED_SELECT_PORT |= (1<<LED3);
	}
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	ff 90       	pop	r15
 178:	ef 90       	pop	r14
 17a:	df 90       	pop	r13
 17c:	cf 90       	pop	r12
 17e:	bf 90       	pop	r11
 180:	af 90       	pop	r10
 182:	9f 90       	pop	r9
 184:	8f 90       	pop	r8
 186:	08 95       	ret

00000188 <main>:
#include "tx/nrf_ping_TX.h"
#include "rx/nrf_ping_RX.h"

#define F_CPU 1000000L

 188:	0e 94 c8 02 	call	0x590	; 0x590 <main_tx>
 18c:	08 95       	ret

0000018e <init_button>:

uint8_t btn_last, btn_prssed, leg, pin;

void init_button()
{
	TST_BTN_DDR &= ~(1<<TST_BTN_LEG);
 18e:	26 98       	cbi	0x04, 6	; 4
	TST_BTN_PORT |= (1<<TST_BTN_LEG);
 190:	2e 9a       	sbi	0x05, 6	; 5
	btn_prssed=0;
 192:	10 92 1b 01 	sts	0x011B, r1
	btn_last=0;
 196:	10 92 1c 01 	sts	0x011C, r1
 19a:	08 95       	ret

0000019c <check_button_click>:
}

uint8_t check_button_click()
// Check if PIN is GND (pulled up Input)
{
	if (btn_last) // last pressed
 19c:	80 91 1c 01 	lds	r24, 0x011C
 1a0:	88 23       	and	r24, r24
 1a2:	41 f0       	breq	.+16     	; 0x1b4 <check_button_click+0x18>
	{
		if (TST_BTN_PIN & (1<<TST_BTN_LEG)) // now not pressed
 1a4:	1e 9b       	sbis	0x03, 6	; 3
 1a6:	19 c0       	rjmp	.+50     	; 0x1da <check_button_click+0x3e>
		{
			btn_last = 0;
 1a8:	10 92 1c 01 	sts	0x011C, r1
			btn_prssed = 0;
 1ac:	10 92 1b 01 	sts	0x011B, r1
				btn_last = 1;
				return 1;
			}
		}
	}
	return 0;
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	08 95       	ret
		{
			btn_last = 0;
			btn_prssed = 0;
		}
	} else { // not pressed
		if (TST_BTN_PIN & (1<<TST_BTN_LEG)) // now also not
 1b4:	1e 9b       	sbis	0x03, 6	; 3
 1b6:	06 c0       	rjmp	.+12     	; 0x1c4 <check_button_click+0x28>
		{
			btn_prssed = 0;
 1b8:	10 92 1b 01 	sts	0x011B, r1
			btn_last = 0;
 1bc:	10 92 1c 01 	sts	0x011C, r1
				btn_last = 1;
				return 1;
			}
		}
	}
	return 0;
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	08 95       	ret
		if (TST_BTN_PIN & (1<<TST_BTN_LEG)) // now also not
		{
			btn_prssed = 0;
			btn_last = 0;
		} else { // now pressed
			btn_prssed++;
 1c4:	80 91 1b 01 	lds	r24, 0x011B
 1c8:	8f 5f       	subi	r24, 0xFF	; 255
 1ca:	80 93 1b 01 	sts	0x011B, r24
			if (btn_prssed > MIN_COUNT_PRESS)
 1ce:	8b 30       	cpi	r24, 0x0B	; 11
 1d0:	30 f0       	brcs	.+12     	; 0x1de <check_button_click+0x42>
			{
				btn_last = 1;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	80 93 1c 01 	sts	0x011C, r24
				return 1;
 1d8:	08 95       	ret
			}
		}
	}
	return 0;
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	08 95       	ret
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	08 95       	ret

000001e2 <nrf_init>:

void nrf_init()
// Init NRF - call at start
{
	// Define CSN and CE as Output and set them to default
	NRF_DDR |= ((1<<CSN)|(1<<CE));
 1e2:	84 b1       	in	r24, 0x04	; 4
 1e4:	83 60       	ori	r24, 0x03	; 3
 1e6:	84 b9       	out	0x04, r24	; 4
	
	// Initialize spi module
	spi_init();
 1e8:	0e 94 17 02 	call	0x42e	; 0x42e <spi_init>
	
	nrf_CE_lo;
 1ec:	28 98       	cbi	0x05, 0	; 5
	nrf_CSN_hi;
 1ee:	29 9a       	sbi	0x05, 1	; 5
 1f0:	08 95       	ret

000001f2 <nrf_read_register>:
	nrf_write_register_1(CONFIG, nrf_CONFIG | value);
}

void nrf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the NRF registers.
{
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	d6 2f       	mov	r29, r22
 1fa:	17 2f       	mov	r17, r23
 1fc:	c4 2f       	mov	r28, r20
	for (uint8_t i=0; i< len ; i++) value[i] = NOP;
 1fe:	44 23       	and	r20, r20
 200:	49 f0       	breq	.+18     	; 0x214 <nrf_read_register+0x22>
 202:	46 2f       	mov	r20, r22
 204:	e6 2f       	mov	r30, r22
 206:	f7 2f       	mov	r31, r23
 208:	3f ef       	ldi	r19, 0xFF	; 255
 20a:	31 93       	st	Z+, r19
 20c:	2e 2f       	mov	r18, r30
 20e:	24 1b       	sub	r18, r20
 210:	2c 17       	cp	r18, r28
 212:	d8 f3       	brcs	.-10     	; 0x20a <nrf_read_register+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	93 e0       	ldi	r25, 0x03	; 3
 216:	9a 95       	dec	r25
 218:	f1 f7       	brne	.-4      	; 0x216 <nrf_read_register+0x24>
 21a:	00 00       	nop
	_delay_us(10);
	nrf_CSN_lo;
 21c:	29 98       	cbi	0x05, 1	; 5
 21e:	93 e0       	ldi	r25, 0x03	; 3
 220:	9a 95       	dec	r25
 222:	f1 f7       	brne	.-4      	; 0x220 <nrf_read_register+0x2e>
 224:	00 00       	nop
	_delay_us(10);	
	spi_fast_shift(R_REGISTER | (REGISTER_MASK & reg));
 226:	8f 71       	andi	r24, 0x1F	; 31
 228:	0e 94 47 02 	call	0x48e	; 0x48e <spi_fast_shift>
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	8a 95       	dec	r24
 230:	f1 f7       	brne	.-4      	; 0x22e <nrf_read_register+0x3c>
 232:	00 00       	nop
	_delay_us(10);	
	spi_transfer_sync(value, value, len);
 234:	4c 2f       	mov	r20, r28
 236:	6d 2f       	mov	r22, r29
 238:	71 2f       	mov	r23, r17
 23a:	8d 2f       	mov	r24, r29
 23c:	91 2f       	mov	r25, r17
 23e:	0e 94 25 02 	call	0x44a	; 0x44a <spi_transfer_sync>
 242:	93 e0       	ldi	r25, 0x03	; 3
 244:	9a 95       	dec	r25
 246:	f1 f7       	brne	.-4      	; 0x244 <nrf_read_register+0x52>
 248:	00 00       	nop
	_delay_us(10);	
	nrf_CSN_hi;
 24a:	29 9a       	sbi	0x05, 1	; 5
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	08 95       	ret

00000254 <nrf_write_register>:

void nrf_write_register(uint8_t reg, uint8_t * value, uint8_t len)
// Writes an array of bytes into into the NRF registers.
{
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	eb 01       	movw	r28, r22
 25c:	14 2f       	mov	r17, r20
	nrf_CSN_lo;
 25e:	29 98       	cbi	0x05, 1	; 5
	spi_fast_shift(W_REGISTER | (REGISTER_MASK & reg));
 260:	8f 71       	andi	r24, 0x1F	; 31
 262:	80 62       	ori	r24, 0x20	; 32
 264:	0e 94 47 02 	call	0x48e	; 0x48e <spi_fast_shift>
	spi_transmit_sync(value,len);
 268:	61 2f       	mov	r22, r17
 26a:	ce 01       	movw	r24, r28
 26c:	0e 94 38 02 	call	0x470	; 0x470 <spi_transmit_sync>
	nrf_CSN_hi;
 270:	29 9a       	sbi	0x05, 1	; 5
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	08 95       	ret

0000027a <nrf_write_register_1>:

void nrf_write_register_1(uint8_t reg, uint8_t value)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	1f 92       	push	r1
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
	uint8_t data[1] = {value};
 284:	69 83       	std	Y+1, r22	; 0x01
	nrf_write_register(reg, data, 1);
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	be 01       	movw	r22, r28
 28a:	6f 5f       	subi	r22, 0xFF	; 255
 28c:	7f 4f       	sbci	r23, 0xFF	; 255
 28e:	0e 94 2a 01 	call	0x254	; 0x254 <nrf_write_register>
}
 292:	0f 90       	pop	r0
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <nrf_config_register>:
}

void nrf_config_register(uint8_t value)
// OR with nrf_CONFIG const and write CONFIG register new value
{
	nrf_write_register_1(CONFIG, nrf_CONFIG | value);
 29a:	68 2f       	mov	r22, r24
 29c:	60 67       	ori	r22, 0x70	; 112
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 3d 01 	call	0x27a	; 0x27a <nrf_write_register_1>
 2a4:	08 95       	ret

000002a6 <nrf_flush>:
}

void nrf_flush()
// Flush TX and RX FIFOs
{
	while (PTX) {} // Not during sending..
 2a6:	80 91 1e 01 	lds	r24, 0x011E
 2aa:	81 11       	cpse	r24, r1
 2ac:	fc cf       	rjmp	.-8      	; 0x2a6 <nrf_flush>
	nrf_CSN_lo;
 2ae:	29 98       	cbi	0x05, 1	; 5
	spi_fast_shift(FLUSH_TX);
 2b0:	81 ee       	ldi	r24, 0xE1	; 225
 2b2:	0e 94 47 02 	call	0x48e	; 0x48e <spi_fast_shift>
	nrf_CSN_hi;
 2b6:	29 9a       	sbi	0x05, 1	; 5
	
	nrf_CSN_lo;
 2b8:	29 98       	cbi	0x05, 1	; 5
	spi_fast_shift(FLUSH_RX);
 2ba:	82 ee       	ldi	r24, 0xE2	; 226
 2bc:	0e 94 47 02 	call	0x48e	; 0x48e <spi_fast_shift>
	nrf_CSN_hi;		
 2c0:	29 9a       	sbi	0x05, 1	; 5
 2c2:	08 95       	ret

000002c4 <nrf_config>:


void nrf_config(uint8_t is_tx)
// Sets the important registers in the NRF module and powers the module
// TODO: setup SETUP_RETR=0, 
{
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
 2ce:	2a 97       	sbiw	r28, 0x0a	; 10
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	f8 94       	cli
 2d4:	de bf       	out	0x3e, r29	; 62
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	cd bf       	out	0x3d, r28	; 61
 2da:	18 2f       	mov	r17, r24
	uint8_t RX_PIPE[5] = {0xf0, 0xf0, 0xf0, 0xf0, 0xf0};
 2dc:	95 e0       	ldi	r25, 0x05	; 5
 2de:	e0 e1       	ldi	r30, 0x10	; 16
 2e0:	f1 e0       	ldi	r31, 0x01	; 1
 2e2:	de 01       	movw	r26, r28
 2e4:	11 96       	adiw	r26, 0x01	; 1
 2e6:	01 90       	ld	r0, Z+
 2e8:	0d 92       	st	X+, r0
 2ea:	9a 95       	dec	r25
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <nrf_config+0x22>
	uint8_t TX_PIPE[5] = {0xf1, 0xf1, 0xf1, 0xf1, 0xf1};
 2ee:	95 e0       	ldi	r25, 0x05	; 5
 2f0:	e5 e1       	ldi	r30, 0x15	; 21
 2f2:	f1 e0       	ldi	r31, 0x01	; 1
 2f4:	de 01       	movw	r26, r28
 2f6:	16 96       	adiw	r26, 0x06	; 6
 2f8:	01 90       	ld	r0, Z+
 2fa:	0d 92       	st	X+, r0
 2fc:	9a 95       	dec	r25
 2fe:	e1 f7       	brne	.-8      	; 0x2f8 <nrf_config+0x34>
	nrf_write_register_1(SETUP_RETR, 0);
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	84 e0       	ldi	r24, 0x04	; 4
 304:	0e 94 3d 01 	call	0x27a	; 0x27a <nrf_write_register_1>
	nrf_write_register_1(RF_CH, nrf_CH);				// Set RF Channel
 308:	62 e0       	ldi	r22, 0x02	; 2
 30a:	85 e0       	ldi	r24, 0x05	; 5
 30c:	0e 94 3d 01 	call	0x27a	; 0x27a <nrf_write_register_1>
	nrf_write_register_1(RX_PW_P0, nrf_PAYLOAD);		// Set Bytes payload
 310:	64 e0       	ldi	r22, 0x04	; 4
 312:	81 e1       	ldi	r24, 0x11	; 17
 314:	0e 94 3d 01 	call	0x27a	; 0x27a <nrf_write_register_1>
	nrf_write_register_1(RF_SETUP, (0b11<<RF_PWR));		// Set 0dBm and 1MBps
 318:	66 e0       	ldi	r22, 0x06	; 6
 31a:	86 e0       	ldi	r24, 0x06	; 6
 31c:	0e 94 3d 01 	call	0x27a	; 0x27a <nrf_write_register_1>
	nrf_write_register_1(EN_AA, 0x00);					// Disable Auto_Ack
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 3d 01 	call	0x27a	; 0x27a <nrf_write_register_1>
	nrf_write_register_1(EN_RXADDR, (1<<ERX_P0));		// Enable only data pipe 0 for RX
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	0e 94 3d 01 	call	0x27a	; 0x27a <nrf_write_register_1>
	nrf_write_register_1(SETUP_AW, (0b11<<AW));			// Enable 5 Byte addresses
 330:	63 e0       	ldi	r22, 0x03	; 3
 332:	83 e0       	ldi	r24, 0x03	; 3
 334:	0e 94 3d 01 	call	0x27a	; 0x27a <nrf_write_register_1>
	if (is_tx)
 338:	11 23       	and	r17, r17
 33a:	79 f0       	breq	.+30     	; 0x35a <nrf_config+0x96>
	{
		nrf_write_register(RX_ADDR_P0, RX_PIPE, 5);			// Set RX pipe
 33c:	45 e0       	ldi	r20, 0x05	; 5
 33e:	be 01       	movw	r22, r28
 340:	6f 5f       	subi	r22, 0xFF	; 255
 342:	7f 4f       	sbci	r23, 0xFF	; 255
 344:	8a e0       	ldi	r24, 0x0A	; 10
 346:	0e 94 2a 01 	call	0x254	; 0x254 <nrf_write_register>
		nrf_write_register(TX_ADDR, TX_PIPE, 5);			// Set TX pipe
 34a:	45 e0       	ldi	r20, 0x05	; 5
 34c:	be 01       	movw	r22, r28
 34e:	6a 5f       	subi	r22, 0xFA	; 250
 350:	7f 4f       	sbci	r23, 0xFF	; 255
 352:	80 e1       	ldi	r24, 0x10	; 16
 354:	0e 94 2a 01 	call	0x254	; 0x254 <nrf_write_register>
 358:	0e c0       	rjmp	.+28     	; 0x376 <nrf_config+0xb2>
	} else {
		nrf_write_register(TX_ADDR, RX_PIPE, 5);			// Set RX pipe
 35a:	45 e0       	ldi	r20, 0x05	; 5
 35c:	be 01       	movw	r22, r28
 35e:	6f 5f       	subi	r22, 0xFF	; 255
 360:	7f 4f       	sbci	r23, 0xFF	; 255
 362:	80 e1       	ldi	r24, 0x10	; 16
 364:	0e 94 2a 01 	call	0x254	; 0x254 <nrf_write_register>
		nrf_write_register(RX_ADDR_P0, TX_PIPE, 5);			// Set TX pipe
 368:	45 e0       	ldi	r20, 0x05	; 5
 36a:	be 01       	movw	r22, r28
 36c:	6a 5f       	subi	r22, 0xFA	; 250
 36e:	7f 4f       	sbci	r23, 0xFF	; 255
 370:	8a e0       	ldi	r24, 0x0A	; 10
 372:	0e 94 2a 01 	call	0x254	; 0x254 <nrf_write_register>
	}
	RESET_STT;											// Reset all IRQ flags on Status
 376:	60 e7       	ldi	r22, 0x70	; 112
 378:	87 e0       	ldi	r24, 0x07	; 7
 37a:	0e 94 3d 01 	call	0x27a	; 0x27a <nrf_write_register_1>
	nrf_flush();										// Flush RX and TX FIFO's
 37e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <nrf_flush>

	// Start receiver
	PTX = 0;        // Start in receiving mode
 382:	10 92 1e 01 	sts	0x011E, r1
	RX_POWERUP;     // Power up in receiving mode
 386:	83 e0       	ldi	r24, 0x03	; 3
 388:	0e 94 4d 01 	call	0x29a	; 0x29a <nrf_config_register>
	nrf_CE_hi;      // start Listening
 38c:	28 9a       	sbi	0x05, 0	; 5
}
 38e:	2a 96       	adiw	r28, 0x0a	; 10
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	f8 94       	cli
 394:	de bf       	out	0x3e, r29	; 62
 396:	0f be       	out	0x3f, r0	; 63
 398:	cd bf       	out	0x3d, r28	; 61
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	08 95       	ret

000003a2 <gabi_send>:
{
	//uint8_t con;
	//nrf_read_register(0, &con, 1);
	//nrf_write_register_1(CONFIG, ((con | (1<<PWR_UP)) & ~(1<<PRIM_RX)));
	
	nrf_CE_lo;
 3a2:	28 98       	cbi	0x05, 0	; 5
	
	nrf_CSN_lo;
 3a4:	29 98       	cbi	0x05, 1	; 5
	spi_fast_shift(FLUSH_TX);
 3a6:	81 ee       	ldi	r24, 0xE1	; 225
 3a8:	0e 94 47 02 	call	0x48e	; 0x48e <spi_fast_shift>
	nrf_CSN_hi;
 3ac:	29 9a       	sbi	0x05, 1	; 5
	nrf_CSN_lo;
 3ae:	29 98       	cbi	0x05, 1	; 5
	spi_fast_shift(FLUSH_RX);
 3b0:	82 ee       	ldi	r24, 0xE2	; 226
 3b2:	0e 94 47 02 	call	0x48e	; 0x48e <spi_fast_shift>
	nrf_CSN_hi;
 3b6:	29 9a       	sbi	0x05, 1	; 5
	
	POWERDN;
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	0e 94 4d 01 	call	0x29a	; 0x29a <nrf_config_register>
 3be:	8b e2       	ldi	r24, 0x2B	; 43
 3c0:	8a 95       	dec	r24
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <gabi_send+0x1e>
 3c4:	00 00       	nop
	_delay_us(130);	
	TX_POWERUP;
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	0e 94 4d 01 	call	0x29a	; 0x29a <nrf_config_register>
 3cc:	9b e2       	ldi	r25, 0x2B	; 43
 3ce:	9a 95       	dec	r25
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <gabi_send+0x2c>
 3d2:	00 00       	nop
	_delay_us(130);
		
	nrf_CSN_lo;                    // Pull down chip select
 3d4:	29 98       	cbi	0x05, 1	; 5
	spi_fast_shift( W_TX_PAYLOAD ); // Write cmd to write payload
 3d6:	80 ea       	ldi	r24, 0xA0	; 160
 3d8:	0e 94 47 02 	call	0x48e	; 0x48e <spi_fast_shift>
	spi_fast_shift(0x14);
 3dc:	84 e1       	ldi	r24, 0x14	; 20
 3de:	0e 94 47 02 	call	0x48e	; 0x48e <spi_fast_shift>
	spi_fast_shift(0x14);
 3e2:	84 e1       	ldi	r24, 0x14	; 20
 3e4:	0e 94 47 02 	call	0x48e	; 0x48e <spi_fast_shift>
	spi_fast_shift(0x14);
 3e8:	84 e1       	ldi	r24, 0x14	; 20
 3ea:	0e 94 47 02 	call	0x48e	; 0x48e <spi_fast_shift>
	spi_fast_shift(0x14);
 3ee:	84 e1       	ldi	r24, 0x14	; 20
 3f0:	0e 94 47 02 	call	0x48e	; 0x48e <spi_fast_shift>
	nrf_CSN_hi;                    // Pull up chip select
 3f4:	29 9a       	sbi	0x05, 1	; 5
	
	nrf_CE_hi;
 3f6:	28 9a       	sbi	0x05, 0	; 5
 3f8:	83 e0       	ldi	r24, 0x03	; 3
 3fa:	8a 95       	dec	r24
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <gabi_send+0x58>
 3fe:	00 00       	nop
	_delay_us(10);                   // Start transmission
	nrf_CE_lo;
 400:	28 98       	cbi	0x05, 0	; 5
	
	RX_POWERUP;
 402:	83 e0       	ldi	r24, 0x03	; 3
 404:	0e 94 4d 01 	call	0x29a	; 0x29a <nrf_config_register>
	RESET_STT;
 408:	60 e7       	ldi	r22, 0x70	; 112
 40a:	87 e0       	ldi	r24, 0x07	; 7
 40c:	0e 94 3d 01 	call	0x27a	; 0x27a <nrf_write_register_1>
	nrf_CE_hi;
 410:	28 9a       	sbi	0x05, 0	; 5
 412:	9b e2       	ldi	r25, 0x2B	; 43
 414:	9a 95       	dec	r25
 416:	f1 f7       	brne	.-4      	; 0x414 <gabi_send+0x72>
 418:	00 00       	nop
	_delay_us(130);
	PORTC|=(1<<PC0);
 41a:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41c:	87 ea       	ldi	r24, 0xA7	; 167
 41e:	91 e6       	ldi	r25, 0x61	; 97
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <gabi_send+0x7e>
 424:	00 c0       	rjmp	.+0      	; 0x426 <gabi_send+0x84>
 426:	00 00       	nop
	_delay_ms(100);
	PORTC&=~(1<<PC0);
 428:	40 98       	cbi	0x08, 0	; 8
	nrf_CSN_hi;
 42a:	29 9a       	sbi	0x05, 1	; 5
 42c:	08 95       	ret

0000042e <spi_init>:
#define DD_SCK      PB5

void spi_init()
// Initialize pins for SPI communication
{
	DDR_SPI &= ~(1<<DD_MISO);
 42e:	24 98       	cbi	0x04, 4	; 4
	// Define the following pins as output
	DDR_SPI |= ((1<<DD_MOSI)|(1<<DD_SS)|(1<<DD_SCK));
 430:	84 b1       	in	r24, 0x04	; 4
 432:	8c 62       	ori	r24, 0x2C	; 44
 434:	84 b9       	out	0x04, r24	; 4
	PORT_SPI |= (1<<DD_MISO) | (1<<DD_SS);
 436:	85 b1       	in	r24, 0x05	; 5
 438:	84 61       	ori	r24, 0x14	; 20
 43a:	85 b9       	out	0x05, r24	; 5
	PORT_SPI &= ~((1<<DD_SCK) | (1<<DD_MOSI)) ;
 43c:	85 b1       	in	r24, 0x05	; 5
 43e:	87 7d       	andi	r24, 0xD7	; 215
 440:	85 b9       	out	0x05, r24	; 5

	SPCR = ((1<<SPE)|       // SPI Enable
 442:	80 e5       	ldi	r24, 0x50	; 80
 444:	8c bd       	out	0x2c, r24	; 44
	(1<<MSTR)|              // Master/Slave select
	(0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate
	(0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
	(0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

	SPSR = 0; //(1<<SPI2X);              // Double Clock Rate
 446:	1d bc       	out	0x2d, r1	; 45
 448:	08 95       	ret

0000044a <spi_transfer_sync>:
}

void spi_transfer_sync (uint8_t * dataout, uint8_t * datain, uint8_t len)
// Shift full array through target device
{
	for (uint8_t i = 0; i < len; i++) {
 44a:	44 23       	and	r20, r20
 44c:	81 f0       	breq	.+32     	; 0x46e <spi_transfer_sync+0x24>
 44e:	28 2f       	mov	r18, r24
 450:	a6 2f       	mov	r26, r22
 452:	b7 2f       	mov	r27, r23
 454:	e8 2f       	mov	r30, r24
 456:	f9 2f       	mov	r31, r25
		SPDR = dataout[i];
 458:	81 91       	ld	r24, Z+
 45a:	8e bd       	out	0x2e, r24	; 46
		while((SPSR & (1<<SPIF))==0);
 45c:	0d b4       	in	r0, 0x2d	; 45
 45e:	07 fe       	sbrs	r0, 7
 460:	fd cf       	rjmp	.-6      	; 0x45c <spi_transfer_sync+0x12>
		datain[i] = SPDR;
 462:	8e b5       	in	r24, 0x2e	; 46
 464:	8d 93       	st	X+, r24
 466:	8e 2f       	mov	r24, r30
 468:	82 1b       	sub	r24, r18
}

void spi_transfer_sync (uint8_t * dataout, uint8_t * datain, uint8_t len)
// Shift full array through target device
{
	for (uint8_t i = 0; i < len; i++) {
 46a:	84 17       	cp	r24, r20
 46c:	a8 f3       	brcs	.-22     	; 0x458 <spi_transfer_sync+0xe>
 46e:	08 95       	ret

00000470 <spi_transmit_sync>:
}

void spi_transmit_sync (uint8_t * dataout, uint8_t len)
// Shift full array to target device without receiving any byte
{
	for (uint8_t i = 0; i < len; i++) {
 470:	66 23       	and	r22, r22
 472:	61 f0       	breq	.+24     	; 0x48c <spi_transmit_sync+0x1c>
 474:	28 2f       	mov	r18, r24
 476:	e8 2f       	mov	r30, r24
 478:	f9 2f       	mov	r31, r25
		SPDR = dataout[i];
 47a:	81 91       	ld	r24, Z+
 47c:	8e bd       	out	0x2e, r24	; 46
		while((SPSR & (1<<SPIF))==0);
 47e:	0d b4       	in	r0, 0x2d	; 45
 480:	07 fe       	sbrs	r0, 7
 482:	fd cf       	rjmp	.-6      	; 0x47e <spi_transmit_sync+0xe>
 484:	8e 2f       	mov	r24, r30
 486:	82 1b       	sub	r24, r18
}

void spi_transmit_sync (uint8_t * dataout, uint8_t len)
// Shift full array to target device without receiving any byte
{
	for (uint8_t i = 0; i < len; i++) {
 488:	86 17       	cp	r24, r22
 48a:	b8 f3       	brcs	.-18     	; 0x47a <spi_transmit_sync+0xa>
 48c:	08 95       	ret

0000048e <spi_fast_shift>:
}

uint8_t spi_fast_shift (uint8_t data)
// Clocks only one byte to target device and returns the received one
{
	SPDR = data;
 48e:	8e bd       	out	0x2e, r24	; 46
	while((SPSR & (1<<SPIF))==0);
 490:	0d b4       	in	r0, 0x2d	; 45
 492:	07 fe       	sbrs	r0, 7
 494:	fd cf       	rjmp	.-6      	; 0x490 <spi_fast_shift+0x2>
	return SPDR;
 496:	8e b5       	in	r24, 0x2e	; 46
 498:	08 95       	ret

0000049a <setup_tx>:
#include <util/delay.h>

uint8_t clck_count;

void setup_tx()
{
 49a:	bf 92       	push	r11
 49c:	cf 92       	push	r12
 49e:	df 92       	push	r13
 4a0:	ef 92       	push	r14
 4a2:	ff 92       	push	r15
 4a4:	0f 93       	push	r16
 4a6:	1f 93       	push	r17
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	00 d0       	rcall	.+0      	; 0x4ae <setup_tx+0x14>
 4ae:	00 d0       	rcall	.+0      	; 0x4b0 <setup_tx+0x16>
 4b0:	00 d0       	rcall	.+0      	; 0x4b2 <setup_tx+0x18>
 4b2:	cd b7       	in	r28, 0x3d	; 61
 4b4:	de b7       	in	r29, 0x3e	; 62
	clck_count = 0;
 4b6:	10 92 1f 01 	sts	0x011F, r1
	init_button();
 4ba:	0e 94 c7 00 	call	0x18e	; 0x18e <init_button>
	nrf_init();
 4be:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <nrf_init>
 4c2:	83 ec       	ldi	r24, 0xC3	; 195
 4c4:	99 e0       	ldi	r25, 0x09	; 9
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <setup_tx+0x2c>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <setup_tx+0x32>
 4cc:	00 00       	nop
	_delay_ms(10);
	nrf_config(1);
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <nrf_config>
	DDRC |= (1<<PC0);
 4d4:	38 9a       	sbi	0x07, 0	; 7
	PORTC &= ~(1<<PC0);
 4d6:	40 98       	cbi	0x08, 0	; 8
	led_screen_init();
 4d8:	0e 94 5f 00 	call	0xbe	; 0xbe <led_screen_init>
	uint8_t reg_val1, val1=0, val2=0;
	uint8_t reg_val5[5];
	for (uint8_t i=0 ; i<=0x17 ; i+=2)
 4dc:	b1 2c       	mov	r11, r1
 4de:	e1 2c       	mov	r14, r1
	_delay_ms(10);
	nrf_config(1);
	DDRC |= (1<<PC0);
	PORTC &= ~(1<<PC0);
	led_screen_init();
	uint8_t reg_val1, val1=0, val2=0;
 4e0:	d1 2c       	mov	r13, r1
 4e2:	c1 2c       	mov	r12, r1
 4e4:	35 c0       	rjmp	.+106    	; 0x550 <setup_tx+0xb6>
	uint8_t reg_val5[5];
	for (uint8_t i=0 ; i<=0x17 ; i+=2)
	{
		for (uint8_t j = i ; j<i+2 ; j++)
		{
			poweroff_led();
 4e6:	0e 94 53 00 	call	0xa6	; 0xa6 <poweroff_led>
 4ea:	96 ef       	ldi	r25, 0xF6	; 246
 4ec:	9f 0d       	add	r25, r15
			if (j == 0x0A || j == 0x0B || j == 0x10)
 4ee:	92 30       	cpi	r25, 0x02	; 2
 4f0:	18 f0       	brcs	.+6      	; 0x4f8 <setup_tx+0x5e>
 4f2:	90 e1       	ldi	r25, 0x10	; 16
 4f4:	f9 12       	cpse	r15, r25
 4f6:	0a c0       	rjmp	.+20     	; 0x50c <setup_tx+0x72>
			{
				nrf_read_register(j, reg_val5, 5) ;
 4f8:	45 e0       	ldi	r20, 0x05	; 5
 4fa:	be 01       	movw	r22, r28
 4fc:	6e 5f       	subi	r22, 0xFE	; 254
 4fe:	7f 4f       	sbci	r23, 0xFF	; 255
 500:	8f 2d       	mov	r24, r15
 502:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <nrf_read_register>
				reg_val1 = reg_val5[4];
 506:	9e 81       	ldd	r25, Y+6	; 0x06
 508:	99 83       	std	Y+1, r25	; 0x01
 50a:	07 c0       	rjmp	.+14     	; 0x51a <setup_tx+0x80>
			}
			else
			nrf_read_register(j, &reg_val1, 1);
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	be 01       	movw	r22, r28
 510:	6f 5f       	subi	r22, 0xFF	; 255
 512:	7f 4f       	sbci	r23, 0xFF	; 255
 514:	8f 2d       	mov	r24, r15
 516:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <nrf_read_register>
			if (j==i) val1=reg_val1;
 51a:	ef 10       	cpse	r14, r15
 51c:	02 c0       	rjmp	.+4      	; 0x522 <setup_tx+0x88>
 51e:	c9 80       	ldd	r12, Y+1	; 0x01
 520:	01 c0       	rjmp	.+2      	; 0x524 <setup_tx+0x8a>
			else val2=reg_val1;
 522:	d9 80       	ldd	r13, Y+1	; 0x01
	led_screen_init();
	uint8_t reg_val1, val1=0, val2=0;
	uint8_t reg_val5[5];
	for (uint8_t i=0 ; i<=0x17 ; i+=2)
	{
		for (uint8_t j = i ; j<i+2 ; j++)
 524:	f3 94       	inc	r15
 526:	2f 2d       	mov	r18, r15
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	20 17       	cp	r18, r16
 52c:	31 07       	cpc	r19, r17
 52e:	dc f2       	brlt	.-74     	; 0x4e6 <setup_tx+0x4c>
			else
			nrf_read_register(j, &reg_val1, 1);
			if (j==i) val1=reg_val1;
			else val2=reg_val1;
		}
		write_to_led_hex(val1, val2, 400);
 530:	40 e9       	ldi	r20, 0x90	; 144
 532:	51 e0       	ldi	r21, 0x01	; 1
 534:	6d 2d       	mov	r22, r13
 536:	8c 2d       	mov	r24, r12
 538:	0e 94 67 00 	call	0xce	; 0xce <write_to_led_hex>
		poweroff_led();
 53c:	0e 94 53 00 	call	0xa6	; 0xa6 <poweroff_led>
	DDRC |= (1<<PC0);
	PORTC &= ~(1<<PC0);
	led_screen_init();
	uint8_t reg_val1, val1=0, val2=0;
	uint8_t reg_val5[5];
	for (uint8_t i=0 ; i<=0x17 ; i+=2)
 540:	68 94       	set
 542:	ee 24       	eor	r14, r14
 544:	e1 f8       	bld	r14, 1
 546:	eb 0c       	add	r14, r11
 548:	88 e1       	ldi	r24, 0x18	; 24
 54a:	e8 16       	cp	r14, r24
 54c:	59 f0       	breq	.+22     	; 0x564 <setup_tx+0xca>
 54e:	be 2c       	mov	r11, r14
	{
		for (uint8_t j = i ; j<i+2 ; j++)
 550:	2e 2d       	mov	r18, r14
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	89 01       	movw	r16, r18
 556:	0e 5f       	subi	r16, 0xFE	; 254
 558:	1f 4f       	sbci	r17, 0xFF	; 255
 55a:	20 17       	cp	r18, r16
 55c:	31 07       	cpc	r19, r17
 55e:	44 f7       	brge	.-48     	; 0x530 <setup_tx+0x96>
 560:	fe 2c       	mov	r15, r14
 562:	c1 cf       	rjmp	.-126    	; 0x4e6 <setup_tx+0x4c>
			else val2=reg_val1;
		}
		write_to_led_hex(val1, val2, 400);
		poweroff_led();
	}
}
 564:	26 96       	adiw	r28, 0x06	; 6
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	f8 94       	cli
 56a:	de bf       	out	0x3e, r29	; 62
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	cd bf       	out	0x3d, r28	; 61
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	1f 91       	pop	r17
 576:	0f 91       	pop	r16
 578:	ff 90       	pop	r15
 57a:	ef 90       	pop	r14
 57c:	df 90       	pop	r13
 57e:	cf 90       	pop	r12
 580:	bf 90       	pop	r11
 582:	08 95       	ret

00000584 <loop_tx>:


void loop_tx()
{
	// uint8_t data[DATA_PAYLOAD]; // Declare the data buffer
	if (check_button_click())
 584:	0e 94 ce 00 	call	0x19c	; 0x19c <check_button_click>
 588:	81 11       	cpse	r24, r1
	{
		//send_counter(0xff);
		gabi_send();
 58a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <gabi_send>
 58e:	08 95       	ret

00000590 <main_tx>:
	}
}

 590:	0e 94 4d 02 	call	0x49a	; 0x49a <setup_tx>
 594:	0e 94 c2 02 	call	0x584	; 0x584 <loop_tx>
 598:	fd cf       	rjmp	.-6      	; 0x594 <main_tx+0x4>

0000059a <_exit>:
 59a:	f8 94       	cli

0000059c <__stop_program>:
 59c:	ff cf       	rjmp	.-2      	; 0x59c <__stop_program>
