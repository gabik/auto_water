
nrf_ping.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000005da  0000066e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010c  0080010c  0000067a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000067a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  000006aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015b0  00000000  00000000  00000812  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077e  00000000  00000000  00001dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007d6  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000398  00000000  00000000  00002d18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003df  00000000  00000000  000030b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f3f  00000000  00000000  0000348f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000148  00000000  00000000  000043ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 95 02 	jmp	0x52a	; 0x52a <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "tx/nrf_ping_TX.h"
#include "rx/nrf_ping_RX.h"

#define F_CPU 1000000L

  a6:	0e 94 e6 02 	call	0x5cc	; 0x5cc <main_tx>
  aa:	08 95       	ret

000000ac <nrf_init>:
uint8_t TX_PIPE[5] = {0xf1, 0xf1, 0xf1, 0xf1, 0xf1};

void nrf_init()
// Init NRF - call at start
{
	NRF_DDR |= ((1<<CSN)|(1<<CE));	
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	83 60       	ori	r24, 0x03	; 3
  b0:	84 b9       	out	0x04, r24	; 4
	spi_init();	
  b2:	0e 94 1b 02 	call	0x436	; 0x436 <spi_init>
	nrf_CE_lo;
  b6:	28 98       	cbi	0x05, 0	; 5
	nrf_CSN_hi;
  b8:	29 9a       	sbi	0x05, 1	; 5
  ba:	08 95       	ret

000000bc <nrf_data_ready>:
}

extern uint8_t nrf_data_ready()
// Checks if data is available for reading
{
	if (PTX) return 0;
  bc:	80 91 0e 01 	lds	r24, 0x010E
  c0:	81 11       	cpse	r24, r1
  c2:	07 c0       	rjmp	.+14     	; 0xd2 <nrf_data_ready+0x16>
	uint8_t status;
	// Read NRF status
	nrf_CSN_lo;                                // Pull down chip select
  c4:	29 98       	cbi	0x05, 1	; 5
	status = spi_fast_shift(NOP);               // Read status register
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	0e 94 4b 02 	call	0x496	; 0x496 <spi_fast_shift>
	nrf_CSN_hi;                                // Pull up chip select
  cc:	29 9a       	sbi	0x05, 1	; 5
	return status & (1<<RX_DR);
  ce:	80 74       	andi	r24, 0x40	; 64
  d0:	08 95       	ret
}

extern uint8_t nrf_data_ready()
// Checks if data is available for reading
{
	if (PTX) return 0;
  d2:	80 e0       	ldi	r24, 0x00	; 0
	// Read NRF status
	nrf_CSN_lo;                                // Pull down chip select
	status = spi_fast_shift(NOP);               // Read status register
	nrf_CSN_hi;                                // Pull up chip select
	return status & (1<<RX_DR);
}
  d4:	08 95       	ret

000000d6 <nrf_write_register>:
	nrf_CSN_hi;
}

void nrf_write_register(uint8_t reg, uint8_t * value, uint8_t len)
// Writes an array of bytes into into the NRF registers.
{
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	eb 01       	movw	r28, r22
  de:	14 2f       	mov	r17, r20
	nrf_CSN_lo;
  e0:	29 98       	cbi	0x05, 1	; 5
	spi_fast_shift(W_REGISTER | (REGISTER_MASK & reg));
  e2:	8f 71       	andi	r24, 0x1F	; 31
  e4:	80 62       	ori	r24, 0x20	; 32
  e6:	0e 94 4b 02 	call	0x496	; 0x496 <spi_fast_shift>
	spi_transmit_sync(value,len);
  ea:	61 2f       	mov	r22, r17
  ec:	ce 01       	movw	r24, r28
  ee:	0e 94 3c 02 	call	0x478	; 0x478 <spi_transmit_sync>
	nrf_CSN_hi;
  f2:	29 9a       	sbi	0x05, 1	; 5
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	1f 91       	pop	r17
  fa:	08 95       	ret

000000fc <nrf_write_register_1>:

void nrf_write_register_1(uint8_t reg, uint8_t value)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	1f 92       	push	r1
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
	uint8_t data[1] = {value};
 106:	69 83       	std	Y+1, r22	; 0x01
	nrf_write_register(reg, data, 1);
 108:	41 e0       	ldi	r20, 0x01	; 1
 10a:	be 01       	movw	r22, r28
 10c:	6f 5f       	subi	r22, 0xFF	; 255
 10e:	7f 4f       	sbci	r23, 0xFF	; 255
 110:	0e 94 6b 00 	call	0xd6	; 0xd6 <nrf_write_register>
}
 114:	0f 90       	pop	r0
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <nrf_flush>:

void nrf_flush()
// Flush TX and RX FIFOs
{
	while (PTX) {} // Not during sending..
 11c:	80 91 0e 01 	lds	r24, 0x010E
 120:	81 11       	cpse	r24, r1
 122:	fc cf       	rjmp	.-8      	; 0x11c <nrf_flush>
	nrf_CSN_lo;
 124:	29 98       	cbi	0x05, 1	; 5
	spi_fast_shift(FLUSH_TX);
 126:	81 ee       	ldi	r24, 0xE1	; 225
 128:	0e 94 4b 02 	call	0x496	; 0x496 <spi_fast_shift>
	nrf_CSN_hi;
 12c:	29 9a       	sbi	0x05, 1	; 5
	
	nrf_CSN_lo;
 12e:	29 98       	cbi	0x05, 1	; 5
	spi_fast_shift(FLUSH_RX);
 130:	82 ee       	ldi	r24, 0xE2	; 226
 132:	0e 94 4b 02 	call	0x496	; 0x496 <spi_fast_shift>
	nrf_CSN_hi;		
 136:	29 9a       	sbi	0x05, 1	; 5
 138:	08 95       	ret

0000013a <nrf_get_raw>:
}

void nrf_get_raw(uint8_t * data)
{
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	ec 01       	movw	r28, r24
	//uint8_t cur_data;
	nrf_CSN_lo;
 140:	29 98       	cbi	0x05, 1	; 5
	spi_fast_shift(R_RX_PAYLOAD);
 142:	81 e6       	ldi	r24, 0x61	; 97
 144:	0e 94 4b 02 	call	0x496	; 0x496 <spi_fast_shift>
	spi_transfer_sync(data, data, nrf_PAYLOAD);   // read payload
 148:	46 e0       	ldi	r20, 0x06	; 6
 14a:	be 01       	movw	r22, r28
 14c:	ce 01       	movw	r24, r28
 14e:	0e 94 29 02 	call	0x452	; 0x452 <spi_transfer_sync>
	nrf_CSN_hi;
 152:	29 9a       	sbi	0x05, 1	; 5
	RESET_STT;	
 154:	60 e7       	ldi	r22, 0x70	; 112
 156:	87 e0       	ldi	r24, 0x07	; 7
 158:	0e 94 7e 00 	call	0xfc	; 0xfc <nrf_write_register_1>
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <nrf24l01_readregister>:

uint8_t nrf24l01_readregister(uint8_t reg) {
	nrf_CSN_lo;
 162:	29 98       	cbi	0x05, 1	; 5
	spi_fast_shift(R_REGISTER | (REGISTER_MASK & reg));
 164:	8f 71       	andi	r24, 0x1F	; 31
 166:	0e 94 4b 02 	call	0x496	; 0x496 <spi_fast_shift>
	uint8_t result = spi_fast_shift(NOP); //read write register
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	0e 94 4b 02 	call	0x496	; 0x496 <spi_fast_shift>
	nrf_CSN_hi; //high CSN
 170:	29 9a       	sbi	0x05, 1	; 5
	return result;
}
 172:	08 95       	ret

00000174 <nrf_config>:
	nrf_CSN_hi;
}

void nrf_config(uint8_t is_tx)
// Sets the important registers in the NRF module and powers the module
{
 174:	cf 93       	push	r28
 176:	c8 2f       	mov	r28, r24
	nrf_write_register_1(SETUP_RETR, 0);
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	0e 94 7e 00 	call	0xfc	; 0xfc <nrf_write_register_1>
	nrf_write_register_1(RF_CH, nrf_CH);				// Set RF Channel
 180:	62 e0       	ldi	r22, 0x02	; 2
 182:	85 e0       	ldi	r24, 0x05	; 5
 184:	0e 94 7e 00 	call	0xfc	; 0xfc <nrf_write_register_1>
	nrf_write_register_1(RX_PW_P0, nrf_PAYLOAD);		// Set Bytes payload
 188:	66 e0       	ldi	r22, 0x06	; 6
 18a:	81 e1       	ldi	r24, 0x11	; 17
 18c:	0e 94 7e 00 	call	0xfc	; 0xfc <nrf_write_register_1>
	nrf_write_register_1(RF_SETUP, (0b11<<RF_PWR));		// Set 0dBm and 1MBps
 190:	66 e0       	ldi	r22, 0x06	; 6
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	0e 94 7e 00 	call	0xfc	; 0xfc <nrf_write_register_1>
	nrf_write_register_1(EN_AA, 0x00);					// Disable Auto_Ack
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 7e 00 	call	0xfc	; 0xfc <nrf_write_register_1>
	nrf_write_register_1(EN_RXADDR, (1<<ERX_P0));		// Enable only data pipe 0 for RX
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 7e 00 	call	0xfc	; 0xfc <nrf_write_register_1>
	nrf_write_register_1(SETUP_AW, (0b11<<AW));			// Enable 5 Byte addresses
 1a8:	63 e0       	ldi	r22, 0x03	; 3
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	0e 94 7e 00 	call	0xfc	; 0xfc <nrf_write_register_1>
	nrf_write_register_1(DYNPD, 0);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	8c e1       	ldi	r24, 0x1C	; 28
 1b4:	0e 94 7e 00 	call	0xfc	; 0xfc <nrf_write_register_1>
	if (is_tx)
 1b8:	cc 23       	and	r28, r28
 1ba:	69 f0       	breq	.+26     	; 0x1d6 <nrf_config+0x62>
	{
		nrf_write_register(RX_ADDR_P0, RX_PIPE, 5);			// Set RX pipe
 1bc:	45 e0       	ldi	r20, 0x05	; 5
 1be:	65 e0       	ldi	r22, 0x05	; 5
 1c0:	71 e0       	ldi	r23, 0x01	; 1
 1c2:	8a e0       	ldi	r24, 0x0A	; 10
 1c4:	0e 94 6b 00 	call	0xd6	; 0xd6 <nrf_write_register>
		nrf_write_register(TX_ADDR, TX_PIPE, 5);			// Set TX pipe
 1c8:	45 e0       	ldi	r20, 0x05	; 5
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	71 e0       	ldi	r23, 0x01	; 1
 1ce:	80 e1       	ldi	r24, 0x10	; 16
 1d0:	0e 94 6b 00 	call	0xd6	; 0xd6 <nrf_write_register>
 1d4:	0c c0       	rjmp	.+24     	; 0x1ee <nrf_config+0x7a>
	} else {
		nrf_write_register(TX_ADDR, RX_PIPE, 5);			// Set RX pipe
 1d6:	45 e0       	ldi	r20, 0x05	; 5
 1d8:	65 e0       	ldi	r22, 0x05	; 5
 1da:	71 e0       	ldi	r23, 0x01	; 1
 1dc:	80 e1       	ldi	r24, 0x10	; 16
 1de:	0e 94 6b 00 	call	0xd6	; 0xd6 <nrf_write_register>
		nrf_write_register(RX_ADDR_P0, TX_PIPE, 5);			// Set TX pipe
 1e2:	45 e0       	ldi	r20, 0x05	; 5
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	71 e0       	ldi	r23, 0x01	; 1
 1e8:	8a e0       	ldi	r24, 0x0A	; 10
 1ea:	0e 94 6b 00 	call	0xd6	; 0xd6 <nrf_write_register>
	}
	RX_POWERUP;     // Power up in receiving mode
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	0e 94 b1 00 	call	0x162	; 0x162 <nrf24l01_readregister>
 1f4:	68 2f       	mov	r22, r24
 1f6:	63 67       	ori	r22, 0x73	; 115
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 7e 00 	call	0xfc	; 0xfc <nrf_write_register_1>
	RESET_STT;											// Reset all IRQ flags on Status
 1fe:	60 e7       	ldi	r22, 0x70	; 112
 200:	87 e0       	ldi	r24, 0x07	; 7
 202:	0e 94 7e 00 	call	0xfc	; 0xfc <nrf_write_register_1>
	nrf_flush();										// Flush RX and TX FIFO's
 206:	0e 94 8e 00 	call	0x11c	; 0x11c <nrf_flush>

	// Start receiver
	PTX = 0;        // Start in receiving mode
 20a:	10 92 0e 01 	sts	0x010E, r1
	nrf_CE_hi;      // start Listening
 20e:	28 9a       	sbi	0x05, 0	; 5
}
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <nrf_send_raw>:
	nrf_CSN_hi; //high CSN
	return result;
}

void nrf_send_raw(uint8_t * value)
{	
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
	while (PTX) {}
 21a:	80 91 0e 01 	lds	r24, 0x010E
 21e:	81 11       	cpse	r24, r1
 220:	fc cf       	rjmp	.-8      	; 0x21a <nrf_send_raw+0x6>
		
	nrf_CE_lo;
 222:	28 98       	cbi	0x05, 0	; 5
	TX_POWERUP;
 224:	0e 94 b1 00 	call	0x162	; 0x162 <nrf24l01_readregister>
 228:	68 2f       	mov	r22, r24
 22a:	62 67       	ori	r22, 0x72	; 114
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 7e 00 	call	0xfc	; 0xfc <nrf_write_register_1>
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 b1 00 	call	0x162	; 0x162 <nrf24l01_readregister>
 238:	8e 78       	andi	r24, 0x8E	; 142
 23a:	68 2f       	mov	r22, r24
 23c:	60 67       	ori	r22, 0x70	; 112
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 7e 00 	call	0xfc	; 0xfc <nrf_write_register_1>
	RESET_STT;
 244:	60 e7       	ldi	r22, 0x70	; 112
 246:	87 e0       	ldi	r24, 0x07	; 7
 248:	0e 94 7e 00 	call	0xfc	; 0xfc <nrf_write_register_1>
	nrf_CSN_lo;
 24c:	29 98       	cbi	0x05, 1	; 5
	spi_fast_shift(FLUSH_TX);
 24e:	81 ee       	ldi	r24, 0xE1	; 225
 250:	0e 94 4b 02 	call	0x496	; 0x496 <spi_fast_shift>
	nrf_CSN_hi;
 254:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	82 e3       	ldi	r24, 0x32	; 50
 258:	8a 95       	dec	r24
 25a:	f1 f7       	brne	.-4      	; 0x258 <nrf_send_raw+0x44>
	_delay_us(150);
		
	nrf_CSN_lo;                    // Pull down chip select
 25c:	29 98       	cbi	0x05, 1	; 5
	spi_fast_shift( W_TX_PAYLOAD ); // Write cmd to write payload
 25e:	80 ea       	ldi	r24, 0xA0	; 160
 260:	0e 94 4b 02 	call	0x496	; 0x496 <spi_fast_shift>
	spi_transmit_sync(value, nrf_PAYLOAD);
 264:	66 e0       	ldi	r22, 0x06	; 6
 266:	ce 01       	movw	r24, r28
 268:	0e 94 3c 02 	call	0x478	; 0x478 <spi_transmit_sync>
	nrf_CSN_hi;                    // Pull up chip select
 26c:	29 9a       	sbi	0x05, 1	; 5
	
	nrf_CE_hi;
 26e:	28 9a       	sbi	0x05, 0	; 5
 270:	85 e0       	ldi	r24, 0x05	; 5
 272:	8a 95       	dec	r24
 274:	f1 f7       	brne	.-4      	; 0x272 <nrf_send_raw+0x5e>
	_delay_us(15);                   // Start transmission
	nrf_CE_lo;
 276:	28 98       	cbi	0x05, 0	; 5

	POWERDN;
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 b1 00 	call	0x162	; 0x162 <nrf24l01_readregister>
 27e:	68 2f       	mov	r22, r24
 280:	6d 7f       	andi	r22, 0xFD	; 253
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 7e 00 	call	0xfc	; 0xfc <nrf_write_register_1>
	
	RX_POWERUP;
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 b1 00 	call	0x162	; 0x162 <nrf24l01_readregister>
 28e:	68 2f       	mov	r22, r24
 290:	63 67       	ori	r22, 0x73	; 115
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	0e 94 7e 00 	call	0xfc	; 0xfc <nrf_write_register_1>
	RESET_STT;
 298:	60 e7       	ldi	r22, 0x70	; 112
 29a:	87 e0       	ldi	r24, 0x07	; 7
 29c:	0e 94 7e 00 	call	0xfc	; 0xfc <nrf_write_register_1>
	nrf_flush();
 2a0:	0e 94 8e 00 	call	0x11c	; 0x11c <nrf_flush>
	nrf_CE_hi;
 2a4:	28 9a       	sbi	0x05, 0	; 5
 2a6:	82 e3       	ldi	r24, 0x32	; 50
 2a8:	8a 95       	dec	r24
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <nrf_send_raw+0x94>
	_delay_us(150);
	
	nrf_CSN_hi;
 2ac:	29 9a       	sbi	0x05, 1	; 5
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <nrf_powerdown>:

void nrf_powerdown()
{
    POWERDN;
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	0e 94 b1 00 	call	0x162	; 0x162 <nrf24l01_readregister>
 2ba:	68 2f       	mov	r22, r24
 2bc:	6d 7f       	andi	r22, 0xFD	; 253
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	0e 94 7e 00 	call	0xfc	; 0xfc <nrf_write_register_1>
 2c4:	08 95       	ret

000002c6 <build_xor>:
	nrf_send_raw(raw);
	// for (uint8_t i =0;i<nrf_PAYLOAD;i+=2) write_to_led_hex(raw[i], raw[i+1], 1000);
}

uint8_t build_xor(uint8_t * data)
{
 2c6:	fc 01       	movw	r30, r24
 2c8:	95 e0       	ldi	r25, 0x05	; 5
    uint8_t xor = 0;
 2ca:	80 e0       	ldi	r24, 0x00	; 0
    for (uint8_t i = 0 ; i<nrf_PAYLOAD-1 ; i++) xor ^= data[i];
 2cc:	21 91       	ld	r18, Z+
 2ce:	82 27       	eor	r24, r18
 2d0:	91 50       	subi	r25, 0x01	; 1
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <build_xor+0x6>
    return xor;
}
 2d4:	08 95       	ret

000002d6 <build_nrf_payload>:

void build_nrf_payload(uint8_t from, uint8_t to, uint8_t seq, uint8_t * data, uint8_t * raw)
{
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	e8 01       	movw	r28, r16
    raw[FROM_ID_BYTE] = from;
 2e0:	88 83       	st	Y, r24
	raw[TO_ID_BYTE] = to;
 2e2:	69 83       	std	Y+1, r22	; 0x01
    raw[SEQ_BYTE] = seq;
 2e4:	4a 83       	std	Y+2, r20	; 0x02
	for (uint8_t i=0 ; i<DATA_PAYLOAD ; i++) raw[i+DATA_BYTE] = data[i];
 2e6:	f9 01       	movw	r30, r18
 2e8:	80 81       	ld	r24, Z
 2ea:	8b 83       	std	Y+3, r24	; 0x03
 2ec:	81 81       	ldd	r24, Z+1	; 0x01
 2ee:	8c 83       	std	Y+4, r24	; 0x04
    raw[XOR_BYTE] = build_xor(raw);
 2f0:	c8 01       	movw	r24, r16
 2f2:	0e 94 63 01 	call	0x2c6	; 0x2c6 <build_xor>
 2f6:	8d 83       	std	Y+5, r24	; 0x05
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	08 95       	ret

00000302 <nrf_get_ack>:
	return valid;
}


uint8_t nrf_get_ack(uint8_t my_id, uint8_t * data, uint8_t * seq)
{
 302:	df 92       	push	r13
 304:	ef 92       	push	r14
 306:	ff 92       	push	r15
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	00 d0       	rcall	.+0      	; 0x312 <nrf_get_ack+0x10>
 312:	00 d0       	rcall	.+0      	; 0x314 <nrf_get_ack+0x12>
 314:	00 d0       	rcall	.+0      	; 0x316 <nrf_get_ack+0x14>
 316:	cd b7       	in	r28, 0x3d	; 61
 318:	de b7       	in	r29, 0x3e	; 62
 31a:	d8 2e       	mov	r13, r24
 31c:	8b 01       	movw	r16, r22
 31e:	7a 01       	movw	r14, r20
	uint8_t valid = 0;
	
	if (nrf_data_ready())
 320:	0e 94 5e 00 	call	0xbc	; 0xbc <nrf_data_ready>
 324:	88 23       	and	r24, r24
 326:	99 f0       	breq	.+38     	; 0x34e <nrf_get_ack+0x4c>
	{
		uint8_t raw[nrf_PAYLOAD];
		nrf_get_raw(raw);
 328:	ce 01       	movw	r24, r28
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	0e 94 9d 00 	call	0x13a	; 0x13a <nrf_get_raw>
		if (raw[TO_ID_BYTE] == my_id)
 330:	8a 81       	ldd	r24, Y+2	; 0x02
 332:	8d 11       	cpse	r24, r13
 334:	0a c0       	rjmp	.+20     	; 0x34a <nrf_get_ack+0x48>
		{
			for (uint8_t i=0 ; i<DATA_PAYLOAD ; i++) data[i] = raw[i+DATA_BYTE];
 336:	8c 81       	ldd	r24, Y+4	; 0x04
 338:	f8 01       	movw	r30, r16
 33a:	80 83       	st	Z, r24
 33c:	8d 81       	ldd	r24, Y+5	; 0x05
 33e:	81 83       	std	Z+1, r24	; 0x01
			*seq = raw[SEQ_BYTE];
 340:	8b 81       	ldd	r24, Y+3	; 0x03
 342:	f7 01       	movw	r30, r14
 344:	80 83       	st	Z, r24
			valid = 1;
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	03 c0       	rjmp	.+6      	; 0x350 <nrf_get_ack+0x4e>
}


uint8_t nrf_get_ack(uint8_t my_id, uint8_t * data, uint8_t * seq)
{
	uint8_t valid = 0;
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	01 c0       	rjmp	.+2      	; 0x350 <nrf_get_ack+0x4e>
 34e:	80 e0       	ldi	r24, 0x00	; 0
			*seq = raw[SEQ_BYTE];
			valid = 1;
		}
	}
	return valid;
}
 350:	26 96       	adiw	r28, 0x06	; 6
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	f8 94       	cli
 356:	de bf       	out	0x3e, r29	; 62
 358:	0f be       	out	0x3f, r0	; 63
 35a:	cd bf       	out	0x3d, r28	; 61
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	ff 90       	pop	r15
 366:	ef 90       	pop	r14
 368:	df 90       	pop	r13
 36a:	08 95       	ret

0000036c <nrf_send>:
	for (uint8_t i=0 ; i<DATA_PAYLOAD ; i++) raw[i+DATA_BYTE] = data[i];
    raw[XOR_BYTE] = build_xor(raw);
}

uint8_t nrf_send(uint8_t from, uint8_t to, uint8_t * data)
{
 36c:	df 92       	push	r13
 36e:	ef 92       	push	r14
 370:	ff 92       	push	r15
 372:	0f 93       	push	r16
 374:	1f 93       	push	r17
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
 37e:	29 97       	sbiw	r28, 0x09	; 9
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	f8 94       	cli
 384:	de bf       	out	0x3e, r29	; 62
 386:	0f be       	out	0x3f, r0	; 63
 388:	cd bf       	out	0x3d, r28	; 61
 38a:	f8 2e       	mov	r15, r24
 38c:	9a 01       	movw	r18, r20
	uint8_t got_ack = 0;
	
    if (tx_seq >= 200) tx_seq = 0;
 38e:	80 91 0c 01 	lds	r24, 0x010C
 392:	88 3c       	cpi	r24, 0xC8	; 200
 394:	10 f0       	brcs	.+4      	; 0x39a <nrf_send+0x2e>
 396:	10 92 0c 01 	sts	0x010C, r1
    uint8_t cur_seq = tx_seq++;
 39a:	e0 90 0c 01 	lds	r14, 0x010C
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	8e 0d       	add	r24, r14
 3a2:	80 93 0c 01 	sts	0x010C, r24

	// build raw packet
	uint8_t raw[nrf_PAYLOAD];
    build_nrf_payload(from, to, cur_seq, data, raw);
 3a6:	8e 01       	movw	r16, r28
 3a8:	0f 5f       	subi	r16, 0xFF	; 255
 3aa:	1f 4f       	sbci	r17, 0xFF	; 255
 3ac:	4e 2d       	mov	r20, r14
 3ae:	8f 2d       	mov	r24, r15
 3b0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <build_nrf_payload>
 3b4:	1a e0       	ldi	r17, 0x0A	; 10
		uint8_t tmp_data[DATA_PAYLOAD];
		uint8_t seq_ack;
        if (nrf_get_ack(from, tmp_data, &seq_ack))
        {
            is_ack = 1;
            for (uint8_t i=0 ; i<DATA_PAYLOAD ; i++) if (tmp_data[i] != MY_ACK) is_ack = 0;
 3b6:	01 e0       	ldi	r16, 0x01	; 1
 3b8:	d1 2c       	mov	r13, r1
	
    uint8_t ack_n = 0;
    uint8_t is_ack;	
    while (ack_n++ < ACKS_N)
    {
        nrf_send_raw(raw);
 3ba:	ce 01       	movw	r24, r28
 3bc:	01 96       	adiw	r24, 0x01	; 1
 3be:	0e 94 0a 01 	call	0x214	; 0x214 <nrf_send_raw>
		LED_PORT |= (1<<LED_PIN);
 3c2:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c4:	83 ed       	ldi	r24, 0xD3	; 211
 3c6:	90 e3       	ldi	r25, 0x30	; 48
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <nrf_send+0x5c>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <nrf_send+0x62>
 3ce:	00 00       	nop
        _delay_ms(LED_DELAY_SEND);		
		LED_PORT &= ~(1<<LED_PIN);
 3d0:	40 98       	cbi	0x08, 0	; 8
 3d2:	83 ed       	ldi	r24, 0xD3	; 211
 3d4:	90 e3       	ldi	r25, 0x30	; 48
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <nrf_send+0x6a>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <nrf_send+0x70>
 3dc:	00 00       	nop
		_delay_ms(ACK_WAIT);		
		uint8_t tmp_data[DATA_PAYLOAD];
		uint8_t seq_ack;
        if (nrf_get_ack(from, tmp_data, &seq_ack))
 3de:	ae 01       	movw	r20, r28
 3e0:	47 5f       	subi	r20, 0xF7	; 247
 3e2:	5f 4f       	sbci	r21, 0xFF	; 255
 3e4:	be 01       	movw	r22, r28
 3e6:	69 5f       	subi	r22, 0xF9	; 249
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ea:	8f 2d       	mov	r24, r15
 3ec:	0e 94 81 01 	call	0x302	; 0x302 <nrf_get_ack>
 3f0:	88 23       	and	r24, r24
 3f2:	71 f0       	breq	.+28     	; 0x410 <nrf_send+0xa4>
        {
            is_ack = 1;
            for (uint8_t i=0 ; i<DATA_PAYLOAD ; i++) if (tmp_data[i] != MY_ACK) is_ack = 0;
 3f4:	90 91 0a 01 	lds	r25, 0x010A
 3f8:	20 2f       	mov	r18, r16
 3fa:	8f 81       	ldd	r24, Y+7	; 0x07
 3fc:	89 13       	cpse	r24, r25
 3fe:	2d 2d       	mov	r18, r13
 400:	88 85       	ldd	r24, Y+8	; 0x08
 402:	89 13       	cpse	r24, r25
 404:	05 c0       	rjmp	.+10     	; 0x410 <nrf_send+0xa4>
            if ((is_ack) && (cur_seq == seq_ack))
 406:	22 23       	and	r18, r18
 408:	19 f0       	breq	.+6      	; 0x410 <nrf_send+0xa4>
 40a:	89 85       	ldd	r24, Y+9	; 0x09
 40c:	e8 16       	cp	r14, r24
 40e:	21 f0       	breq	.+8      	; 0x418 <nrf_send+0xac>
 410:	11 50       	subi	r17, 0x01	; 1
	uint8_t raw[nrf_PAYLOAD];
    build_nrf_payload(from, to, cur_seq, data, raw);
	
    uint8_t ack_n = 0;
    uint8_t is_ack;	
    while (ack_n++ < ACKS_N)
 412:	99 f6       	brne	.-90     	; 0x3ba <nrf_send+0x4e>
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	01 c0       	rjmp	.+2      	; 0x41a <nrf_send+0xae>
        {
            is_ack = 1;
            for (uint8_t i=0 ; i<DATA_PAYLOAD ; i++) if (tmp_data[i] != MY_ACK) is_ack = 0;
            if ((is_ack) && (cur_seq == seq_ack))
			{
				got_ack = 1;
 418:	81 e0       	ldi	r24, 0x01	; 1
				ack_n = ACKS_N;
			}
        }
    }
    return got_ack;
}
 41a:	29 96       	adiw	r28, 0x09	; 9
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	f8 94       	cli
 420:	de bf       	out	0x3e, r29	; 62
 422:	0f be       	out	0x3f, r0	; 63
 424:	cd bf       	out	0x3d, r28	; 61
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	0f 91       	pop	r16
 42e:	ff 90       	pop	r15
 430:	ef 90       	pop	r14
 432:	df 90       	pop	r13
 434:	08 95       	ret

00000436 <spi_init>:
#define DD_SCK      PB5

void spi_init()
// Initialize pins for SPI communication
{
	DDR_SPI &= ~(1<<DD_MISO);
 436:	24 98       	cbi	0x04, 4	; 4
	// Define the following pins as output
	DDR_SPI |= ((1<<DD_MOSI)|(1<<DD_SS)|(1<<DD_SCK));
 438:	84 b1       	in	r24, 0x04	; 4
 43a:	8c 62       	ori	r24, 0x2C	; 44
 43c:	84 b9       	out	0x04, r24	; 4
	PORT_SPI |= (1<<DD_MISO) | (1<<DD_SS);
 43e:	85 b1       	in	r24, 0x05	; 5
 440:	84 61       	ori	r24, 0x14	; 20
 442:	85 b9       	out	0x05, r24	; 5
	PORT_SPI &= ~((1<<DD_SCK) | (1<<DD_MOSI)) ;
 444:	85 b1       	in	r24, 0x05	; 5
 446:	87 7d       	andi	r24, 0xD7	; 215
 448:	85 b9       	out	0x05, r24	; 5

	SPCR = ((1<<SPE)|       // SPI Enable
 44a:	80 e5       	ldi	r24, 0x50	; 80
 44c:	8c bd       	out	0x2c, r24	; 44
	(1<<MSTR)|              // Master/Slave select
	(0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate
	(0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
	(0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

	SPSR = 0; //(1<<SPI2X);              // Double Clock Rate
 44e:	1d bc       	out	0x2d, r1	; 45
 450:	08 95       	ret

00000452 <spi_transfer_sync>:
}

void spi_transfer_sync (uint8_t * dataout, uint8_t * datain, uint8_t len)
// Shift full array through target device
{
	for (uint8_t i = 0; i < len; i++) {
 452:	44 23       	and	r20, r20
 454:	81 f0       	breq	.+32     	; 0x476 <spi_transfer_sync+0x24>
 456:	28 2f       	mov	r18, r24
 458:	a6 2f       	mov	r26, r22
 45a:	b7 2f       	mov	r27, r23
 45c:	e8 2f       	mov	r30, r24
 45e:	f9 2f       	mov	r31, r25
		SPDR = dataout[i];
 460:	81 91       	ld	r24, Z+
 462:	8e bd       	out	0x2e, r24	; 46
		while((SPSR & (1<<SPIF))==0);
 464:	0d b4       	in	r0, 0x2d	; 45
 466:	07 fe       	sbrs	r0, 7
 468:	fd cf       	rjmp	.-6      	; 0x464 <spi_transfer_sync+0x12>
		datain[i] = SPDR;
 46a:	8e b5       	in	r24, 0x2e	; 46
 46c:	8d 93       	st	X+, r24
 46e:	8e 2f       	mov	r24, r30
 470:	82 1b       	sub	r24, r18
}

void spi_transfer_sync (uint8_t * dataout, uint8_t * datain, uint8_t len)
// Shift full array through target device
{
	for (uint8_t i = 0; i < len; i++) {
 472:	84 17       	cp	r24, r20
 474:	a8 f3       	brcs	.-22     	; 0x460 <spi_transfer_sync+0xe>
 476:	08 95       	ret

00000478 <spi_transmit_sync>:
}

void spi_transmit_sync (uint8_t * dataout, uint8_t len)
// Shift full array to target device without receiving any byte
{
	for (uint8_t i = 0; i < len; i++) {
 478:	66 23       	and	r22, r22
 47a:	61 f0       	breq	.+24     	; 0x494 <spi_transmit_sync+0x1c>
 47c:	28 2f       	mov	r18, r24
 47e:	e8 2f       	mov	r30, r24
 480:	f9 2f       	mov	r31, r25
		SPDR = dataout[i];
 482:	81 91       	ld	r24, Z+
 484:	8e bd       	out	0x2e, r24	; 46
		while((SPSR & (1<<SPIF))==0);
 486:	0d b4       	in	r0, 0x2d	; 45
 488:	07 fe       	sbrs	r0, 7
 48a:	fd cf       	rjmp	.-6      	; 0x486 <spi_transmit_sync+0xe>
 48c:	8e 2f       	mov	r24, r30
 48e:	82 1b       	sub	r24, r18
}

void spi_transmit_sync (uint8_t * dataout, uint8_t len)
// Shift full array to target device without receiving any byte
{
	for (uint8_t i = 0; i < len; i++) {
 490:	86 17       	cp	r24, r22
 492:	b8 f3       	brcs	.-18     	; 0x482 <spi_transmit_sync+0xa>
 494:	08 95       	ret

00000496 <spi_fast_shift>:
}

uint8_t spi_fast_shift (uint8_t data)
// Clocks only one byte to target device and returns the received one
{
	SPDR = data;
 496:	8e bd       	out	0x2e, r24	; 46
	while((SPSR & (1<<SPIF))==0);
 498:	0d b4       	in	r0, 0x2d	; 45
 49a:	07 fe       	sbrs	r0, 7
 49c:	fd cf       	rjmp	.-6      	; 0x498 <spi_fast_shift+0x2>
	return SPDR;
 49e:	8e b5       	in	r24, 0x2e	; 46
 4a0:	08 95       	ret

000004a2 <send_counter>:
#define LED_DELAY_ERROR (LED_DELAY_OK*3)

uint8_t clck_count = 0;

uint8_t send_counter(uint8_t clck_count)
{
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	00 d0       	rcall	.+0      	; 0x4a8 <send_counter+0x6>
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62
    uint8_t data[DATA_PAYLOAD];
    for (uint8_t i=0; i<DATA_PAYLOAD ; i++) data[i]=0;
 4ac:	1a 82       	std	Y+2, r1	; 0x02
    data[0] = clck_count;
 4ae:	89 83       	std	Y+1, r24	; 0x01
    if (nrf_send(MY_ID, 1, data)) return 1;
 4b0:	ae 01       	movw	r20, r28
 4b2:	4f 5f       	subi	r20, 0xFF	; 255
 4b4:	5f 4f       	sbci	r21, 0xFF	; 255
 4b6:	61 e0       	ldi	r22, 0x01	; 1
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	0e 94 b6 01 	call	0x36c	; 0x36c <nrf_send>
 4be:	91 e0       	ldi	r25, 0x01	; 1
 4c0:	81 11       	cpse	r24, r1
 4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <send_counter+0x24>
 4c4:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
}
 4c6:	89 2f       	mov	r24, r25
 4c8:	0f 90       	pop	r0
 4ca:	0f 90       	pop	r0
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	08 95       	ret

000004d2 <setup_tx>:

void setup_tx()
{
	clck_count = 0;
 4d2:	10 92 0d 01 	sts	0x010D, r1
	// init_button();
	nrf_init();
 4d6:	0e 94 56 00 	call	0xac	; 0xac <nrf_init>
 4da:	83 ec       	ldi	r24, 0xC3	; 195
 4dc:	99 e0       	ldi	r25, 0x09	; 9
 4de:	01 97       	sbiw	r24, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <setup_tx+0xc>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <setup_tx+0x12>
 4e4:	00 00       	nop
	_delay_ms(10);
	nrf_config(1);
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	0e 94 ba 00 	call	0x174	; 0x174 <nrf_config>
	DDRC |= (1<<PC0);
 4ec:	38 9a       	sbi	0x07, 0	; 7
	PORTC &= ~(1<<PC0);
 4ee:	40 98       	cbi	0x08, 0	; 8
		poweroff_led();
	}
    */

    // Interrupt pin
    DDRD &= ~(1<<PD2); // INT0
 4f0:	52 98       	cbi	0x0a, 2	; 10
    PORTD |= (1<<PD2); // Set HIGH
 4f2:	5a 9a       	sbi	0x0b, 2	; 11
    EICRA |= (1<<ISC01); // Wake on LOW
 4f4:	e9 e6       	ldi	r30, 0x69	; 105
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	82 60       	ori	r24, 0x02	; 2
 4fc:	80 83       	st	Z, r24

    // Sleep mode
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 4fe:	83 b7       	in	r24, 0x33	; 51
 500:	81 7f       	andi	r24, 0xF1	; 241
 502:	84 60       	ori	r24, 0x04	; 4
 504:	83 bf       	out	0x33, r24	; 51

    // LED
    LED_DDR |= (1<<LED_PIN);
 506:	38 9a       	sbi	0x07, 0	; 7
    LED_PORT &= ~(1<<LED_PIN);
 508:	40 98       	cbi	0x08, 0	; 8

    sei();
 50a:	78 94       	sei
 50c:	08 95       	ret

0000050e <power_down>:
}

void power_down()
{
    nrf_powerdown();
 50e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <nrf_powerdown>
    EIMSK |= (1<<INT0); // INT0 enable
 512:	e8 9a       	sbi	0x1d, 0	; 29
    LED_PORT &= ~(1<<LED_PIN);
 514:	40 98       	cbi	0x08, 0	; 8
    EIFR |= (1<<INTF0); // clear flag
 516:	e0 9a       	sbi	0x1c, 0	; 28
    sei();
 518:	78 94       	sei
    sleep_mode();
 51a:	83 b7       	in	r24, 0x33	; 51
 51c:	81 60       	ori	r24, 0x01	; 1
 51e:	83 bf       	out	0x33, r24	; 51
 520:	88 95       	sleep
 522:	83 b7       	in	r24, 0x33	; 51
 524:	8e 7f       	andi	r24, 0xFE	; 254
 526:	83 bf       	out	0x33, r24	; 51
 528:	08 95       	ret

0000052a <__vector_1>:
}

ISR(INT0_vect) // wake up on click (INT0)
{
 52a:	1f 92       	push	r1
 52c:	0f 92       	push	r0
 52e:	0f b6       	in	r0, 0x3f	; 63
 530:	0f 92       	push	r0
 532:	11 24       	eor	r1, r1
 534:	2f 93       	push	r18
 536:	3f 93       	push	r19
 538:	4f 93       	push	r20
 53a:	5f 93       	push	r21
 53c:	6f 93       	push	r22
 53e:	7f 93       	push	r23
 540:	8f 93       	push	r24
 542:	9f 93       	push	r25
 544:	af 93       	push	r26
 546:	bf 93       	push	r27
 548:	ef 93       	push	r30
 54a:	ff 93       	push	r31
    EIMSK &= ~(1<<INT0); // INT0 disable
 54c:	e8 98       	cbi	0x1d, 0	; 29
    if (send_counter(clck_count++)) // If success
 54e:	80 91 0d 01 	lds	r24, 0x010D
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	98 0f       	add	r25, r24
 556:	90 93 0d 01 	sts	0x010D, r25
 55a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <send_counter>
 55e:	88 23       	and	r24, r24
 560:	b9 f0       	breq	.+46     	; 0x590 <__vector_1+0x66>
    { // blink twice
        LED_PORT |= (1<<LED_PIN);
 562:	40 9a       	sbi	0x08, 0	; 8
 564:	87 ea       	ldi	r24, 0xA7	; 167
 566:	91 e6       	ldi	r25, 0x61	; 97
 568:	01 97       	sbiw	r24, 0x01	; 1
 56a:	f1 f7       	brne	.-4      	; 0x568 <__vector_1+0x3e>
 56c:	00 c0       	rjmp	.+0      	; 0x56e <__vector_1+0x44>
 56e:	00 00       	nop
        _delay_ms(LED_DELAY_OK);
        LED_PORT &= ~(1<<LED_PIN);
 570:	40 98       	cbi	0x08, 0	; 8
 572:	87 ea       	ldi	r24, 0xA7	; 167
 574:	91 e6       	ldi	r25, 0x61	; 97
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	f1 f7       	brne	.-4      	; 0x576 <__vector_1+0x4c>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <__vector_1+0x52>
 57c:	00 00       	nop
        _delay_ms(LED_DELAY_OK);
        LED_PORT |= (1<<LED_PIN);
 57e:	40 9a       	sbi	0x08, 0	; 8
 580:	87 ea       	ldi	r24, 0xA7	; 167
 582:	91 e6       	ldi	r25, 0x61	; 97
 584:	01 97       	sbiw	r24, 0x01	; 1
 586:	f1 f7       	brne	.-4      	; 0x584 <__vector_1+0x5a>
 588:	00 c0       	rjmp	.+0      	; 0x58a <__vector_1+0x60>
 58a:	00 00       	nop
        _delay_ms(LED_DELAY_OK);
        LED_PORT &= ~(1<<LED_PIN);
 58c:	40 98       	cbi	0x08, 0	; 8
 58e:	0b c0       	rjmp	.+22     	; 0x5a6 <__vector_1+0x7c>
    } else { // if failed long blink
        LED_PORT |= (1<<LED_PIN);
 590:	40 9a       	sbi	0x08, 0	; 8
 592:	9f e5       	ldi	r25, 0x5F	; 95
 594:	2a ee       	ldi	r18, 0xEA	; 234
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	91 50       	subi	r25, 0x01	; 1
 59a:	20 40       	sbci	r18, 0x00	; 0
 59c:	80 40       	sbci	r24, 0x00	; 0
 59e:	e1 f7       	brne	.-8      	; 0x598 <__vector_1+0x6e>
 5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <__vector_1+0x78>
 5a2:	00 00       	nop
        _delay_ms(LED_DELAY_ERROR);
        LED_PORT &= ~(1<<LED_PIN);
 5a4:	40 98       	cbi	0x08, 0	; 8
    }

    power_down();
 5a6:	0e 94 87 02 	call	0x50e	; 0x50e <power_down>
}
 5aa:	ff 91       	pop	r31
 5ac:	ef 91       	pop	r30
 5ae:	bf 91       	pop	r27
 5b0:	af 91       	pop	r26
 5b2:	9f 91       	pop	r25
 5b4:	8f 91       	pop	r24
 5b6:	7f 91       	pop	r23
 5b8:	6f 91       	pop	r22
 5ba:	5f 91       	pop	r21
 5bc:	4f 91       	pop	r20
 5be:	3f 91       	pop	r19
 5c0:	2f 91       	pop	r18
 5c2:	0f 90       	pop	r0
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	0f 90       	pop	r0
 5c8:	1f 90       	pop	r1
 5ca:	18 95       	reti

000005cc <main_tx>:

int main_tx(void) {setup_tx(); power_down(); while(1);  return(0);}
 5cc:	0e 94 69 02 	call	0x4d2	; 0x4d2 <setup_tx>
 5d0:	0e 94 87 02 	call	0x50e	; 0x50e <power_down>
 5d4:	ff cf       	rjmp	.-2      	; 0x5d4 <main_tx+0x8>

000005d6 <_exit>:
 5d6:	f8 94       	cli

000005d8 <__stop_program>:
 5d8:	ff cf       	rjmp	.-2      	; 0x5d8 <__stop_program>
