
nrf_ping.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000024e  000002e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010a  0080010a  000002ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000539  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000347  00000000  00000000  00000905  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f9  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001048  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000246  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d0  00000000  00000000  0000138e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000155e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  9e:	0c 94 25 01 	jmp	0x24a	; 0x24a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <poweroff_led>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	89 ef       	ldi	r24, 0xF9	; 249
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <poweroff_led+0x4>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <poweroff_led+0xa>
  b0:	00 00       	nop
}

void poweroff_led()
{
	_delay_ms(1);
	SEGMENTS_PORT = 0xFF; // + to cathode to power off
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8b b9       	out	0x0b, r24	; 11
	LED_SELECT_PORT &= ~((1<<LED0) | (1<<LED1) | (1<<LED2) | (1<<LED3)); // 0 to LED ports (0 to Anode)
  b6:	88 b1       	in	r24, 0x08	; 8
  b8:	83 7c       	andi	r24, 0xC3	; 195
  ba:	88 b9       	out	0x08, r24	; 8
  bc:	08 95       	ret

000000be <led_screen_init>:
uint8_t digits[10] = {DG0, DG1, DG2, DG3, DG4, DG5, DG6, DG7, DG8, DG9};
uint8_t led_pn[4]  = {LED0, LED1, LED2, LED3};
	
void led_screen_init()
{
	SEGMENTS_DDR = 0xFF;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	8a b9       	out	0x0a, r24	; 10
	LED_SELECT_DDR |= (1<<LED0) | (1<<LED1) | (1<<LED2) | (1<<LED3);
  c2:	87 b1       	in	r24, 0x07	; 7
  c4:	8c 63       	ori	r24, 0x3C	; 60
  c6:	87 b9       	out	0x07, r24	; 7
	poweroff_led();
  c8:	0e 94 53 00 	call	0xa6	; 0xa6 <poweroff_led>
  cc:	08 95       	ret

000000ce <devide_4_digits>:
// 	}
	//poweroff_led();
}

void devide_4_digits(uint16_t num, uint8_t * d)
{
  ce:	fb 01       	movw	r30, r22
	uint8_t d1=0, d2=0, d3=0, d4=0;
	while (num >= 1000) { num-=1000; d1++; }
  d0:	88 3e       	cpi	r24, 0xE8	; 232
  d2:	23 e0       	ldi	r18, 0x03	; 3
  d4:	92 07       	cpc	r25, r18
  d6:	48 f0       	brcs	.+18     	; 0xea <devide_4_digits+0x1c>
	//poweroff_led();
}

void devide_4_digits(uint16_t num, uint8_t * d)
{
	uint8_t d1=0, d2=0, d3=0, d4=0;
  d8:	40 e0       	ldi	r20, 0x00	; 0
	while (num >= 1000) { num-=1000; d1++; }
  da:	88 5e       	subi	r24, 0xE8	; 232
  dc:	93 40       	sbci	r25, 0x03	; 3
  de:	4f 5f       	subi	r20, 0xFF	; 255
  e0:	88 3e       	cpi	r24, 0xE8	; 232
  e2:	23 e0       	ldi	r18, 0x03	; 3
  e4:	92 07       	cpc	r25, r18
  e6:	c8 f7       	brcc	.-14     	; 0xda <devide_4_digits+0xc>
  e8:	01 c0       	rjmp	.+2      	; 0xec <devide_4_digits+0x1e>
	//poweroff_led();
}

void devide_4_digits(uint16_t num, uint8_t * d)
{
	uint8_t d1=0, d2=0, d3=0, d4=0;
  ea:	40 e0       	ldi	r20, 0x00	; 0
	while (num >= 1000) { num-=1000; d1++; }
	while (num >= 100)	{ num -=100; d2++; }
  ec:	84 36       	cpi	r24, 0x64	; 100
  ee:	91 05       	cpc	r25, r1
  f0:	40 f0       	brcs	.+16     	; 0x102 <devide_4_digits+0x34>
  f2:	50 e0       	ldi	r21, 0x00	; 0
  f4:	84 56       	subi	r24, 0x64	; 100
  f6:	91 09       	sbc	r25, r1
  f8:	5f 5f       	subi	r21, 0xFF	; 255
  fa:	84 36       	cpi	r24, 0x64	; 100
  fc:	91 05       	cpc	r25, r1
  fe:	d0 f7       	brcc	.-12     	; 0xf4 <devide_4_digits+0x26>
 100:	01 c0       	rjmp	.+2      	; 0x104 <devide_4_digits+0x36>
 102:	50 e0       	ldi	r21, 0x00	; 0
	while (num >= 10)	{ num -= 10; d3++; }
 104:	8a 30       	cpi	r24, 0x0A	; 10
 106:	91 05       	cpc	r25, r1
 108:	38 f0       	brcs	.+14     	; 0x118 <devide_4_digits+0x4a>
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	0a 97       	sbiw	r24, 0x0a	; 10
 10e:	6f 5f       	subi	r22, 0xFF	; 255
 110:	8a 30       	cpi	r24, 0x0A	; 10
 112:	91 05       	cpc	r25, r1
 114:	d8 f7       	brcc	.-10     	; 0x10c <devide_4_digits+0x3e>
 116:	01 c0       	rjmp	.+2      	; 0x11a <devide_4_digits+0x4c>
 118:	60 e0       	ldi	r22, 0x00	; 0
	while (num > 0)		{ num -= 1 ; d4++; }
 11a:	00 97       	sbiw	r24, 0x00	; 0
 11c:	39 f0       	breq	.+14     	; 0x12c <devide_4_digits+0x5e>
 11e:	9c 01       	movw	r18, r24
 120:	21 50       	subi	r18, 0x01	; 1
 122:	31 09       	sbc	r19, r1
 124:	21 15       	cp	r18, r1
 126:	31 05       	cpc	r19, r1
 128:	d9 f7       	brne	.-10     	; 0x120 <devide_4_digits+0x52>
 12a:	01 c0       	rjmp	.+2      	; 0x12e <devide_4_digits+0x60>
 12c:	80 e0       	ldi	r24, 0x00	; 0
	d[3]=d4; d[2]=d3; d[1]=d2; d[0]=d1;
 12e:	83 83       	std	Z+3, r24	; 0x03
 130:	62 83       	std	Z+2, r22	; 0x02
 132:	51 83       	std	Z+1, r21	; 0x01
 134:	40 83       	st	Z, r20
 136:	08 95       	ret

00000138 <write_to_led>:
	SEGMENTS_PORT = 0xFF; // + to cathode to power off
	LED_SELECT_PORT &= ~((1<<LED0) | (1<<LED1) | (1<<LED2) | (1<<LED3)); // 0 to LED ports (0 to Anode)
}

void write_to_led(uint16_t num, uint8_t digit)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	00 d0       	rcall	.+0      	; 0x13e <write_to_led+0x6>
 13e:	00 d0       	rcall	.+0      	; 0x140 <write_to_led+0x8>
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
	uint8_t d[4];
	devide_4_digits(num, d);
 144:	be 01       	movw	r22, r28
 146:	6f 5f       	subi	r22, 0xFF	; 255
 148:	7f 4f       	sbci	r23, 0xFF	; 255
 14a:	0e 94 67 00 	call	0xce	; 0xce <devide_4_digits>

	poweroff_led();
 14e:	0e 94 53 00 	call	0xa6	; 0xa6 <poweroff_led>
	SEGMENTS_PORT = digits[d[0]];
 152:	e9 81       	ldd	r30, Y+1	; 0x01
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	e0 50       	subi	r30, 0x00	; 0
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	80 81       	ld	r24, Z
 15c:	8b b9       	out	0x0b, r24	; 11
	LED_SELECT_PORT |= (1<<LED0);
 15e:	45 9a       	sbi	0x08, 5	; 8
	poweroff_led();	
 160:	0e 94 53 00 	call	0xa6	; 0xa6 <poweroff_led>
	SEGMENTS_PORT = digits[d[1]];
 164:	ea 81       	ldd	r30, Y+2	; 0x02
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	e0 50       	subi	r30, 0x00	; 0
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	80 81       	ld	r24, Z
 16e:	8b b9       	out	0x0b, r24	; 11
	LED_SELECT_PORT |= (1<<LED1);
 170:	44 9a       	sbi	0x08, 4	; 8
	poweroff_led();	
 172:	0e 94 53 00 	call	0xa6	; 0xa6 <poweroff_led>
	SEGMENTS_PORT = digits[d[2]];
 176:	eb 81       	ldd	r30, Y+3	; 0x03
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	e0 50       	subi	r30, 0x00	; 0
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	80 81       	ld	r24, Z
 180:	8b b9       	out	0x0b, r24	; 11
	LED_SELECT_PORT |= (1<<LED2);
 182:	43 9a       	sbi	0x08, 3	; 8
	poweroff_led();
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <poweroff_led>
	SEGMENTS_PORT = digits[d[3]];
 188:	ec 81       	ldd	r30, Y+4	; 0x04
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	e0 50       	subi	r30, 0x00	; 0
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	80 81       	ld	r24, Z
 192:	8b b9       	out	0x0b, r24	; 11
	LED_SELECT_PORT |= (1<<LED3);
 194:	42 9a       	sbi	0x08, 2	; 8
	poweroff_led();	
 196:	0e 94 53 00 	call	0xa6	; 0xa6 <poweroff_led>
// 		//poweroff_led();
// 		SEGMENTS_PORT = digits[d[i]];
// 		LED_SELECT_PORT |= led_pn[i];
// 	}
	//poweroff_led();
}
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	0f 90       	pop	r0
 1a0:	0f 90       	pop	r0
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <main>:
#include "tx/nrf_ping_TX.h"
#include "rx/nrf_ping_RX.h"

#define F_CPU 1000000L

 1a8:	0e 94 20 01 	call	0x240	; 0x240 <main_rx>
 1ac:	08 95       	ret

000001ae <init_button>:

uint8_t btn_last, btn_prssed, leg, pin;

void init_button()
{
	TST_BTN_DDR &= ~(1<<TST_BTN_LEG);
 1ae:	26 98       	cbi	0x04, 6	; 4
	TST_BTN_PORT |= (1<<TST_BTN_LEG);
 1b0:	2e 9a       	sbi	0x05, 6	; 5
	btn_prssed=0;
 1b2:	10 92 0b 01 	sts	0x010B, r1
	btn_last=0;
 1b6:	10 92 0c 01 	sts	0x010C, r1
 1ba:	08 95       	ret

000001bc <check_button_click>:
}

uint8_t check_button_click()
// Check if PIN is GND (pulled up Input)
{
	if (btn_last) // last pressed
 1bc:	80 91 0c 01 	lds	r24, 0x010C
 1c0:	88 23       	and	r24, r24
 1c2:	41 f0       	breq	.+16     	; 0x1d4 <check_button_click+0x18>
	{
		if (TST_BTN_PIN & (1<<TST_BTN_LEG)) // now not pressed
 1c4:	1e 9b       	sbis	0x03, 6	; 3
 1c6:	19 c0       	rjmp	.+50     	; 0x1fa <check_button_click+0x3e>
		{
			btn_last = 0;
 1c8:	10 92 0c 01 	sts	0x010C, r1
			btn_prssed = 0;
 1cc:	10 92 0b 01 	sts	0x010B, r1
				btn_last = 1;
				return 1;
			}
		}
	}
	return 0;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	08 95       	ret
		{
			btn_last = 0;
			btn_prssed = 0;
		}
	} else { // not pressed
		if (TST_BTN_PIN & (1<<TST_BTN_LEG)) // now also not
 1d4:	1e 9b       	sbis	0x03, 6	; 3
 1d6:	06 c0       	rjmp	.+12     	; 0x1e4 <check_button_click+0x28>
		{
			btn_prssed = 0;
 1d8:	10 92 0b 01 	sts	0x010B, r1
			btn_last = 0;
 1dc:	10 92 0c 01 	sts	0x010C, r1
				btn_last = 1;
				return 1;
			}
		}
	}
	return 0;
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	08 95       	ret
		if (TST_BTN_PIN & (1<<TST_BTN_LEG)) // now also not
		{
			btn_prssed = 0;
			btn_last = 0;
		} else { // now pressed
			btn_prssed++;
 1e4:	80 91 0b 01 	lds	r24, 0x010B
 1e8:	8f 5f       	subi	r24, 0xFF	; 255
 1ea:	80 93 0b 01 	sts	0x010B, r24
			if (btn_prssed > MIN_COUNT_PRESS)
 1ee:	8b 30       	cpi	r24, 0x0B	; 11
 1f0:	30 f0       	brcs	.+12     	; 0x1fe <check_button_click+0x42>
			{
				btn_last = 1;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 0c 01 	sts	0x010C, r24
				return 1;
 1f8:	08 95       	ret
			}
		}
	}
	return 0;
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	08 95       	ret
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret

00000202 <setup_rx>:
// 	LED_DDR |= (1<<LED_PIN);
// 	LED_PORT &= ~(LED_PIN);
// 	nrf_init();
// 	_delay_ms(10);
// 	nrf_config();
	init_button();
 202:	0e 94 d7 00 	call	0x1ae	; 0x1ae <init_button>
	led_screen_init();
 206:	0e 94 5f 00 	call	0xbe	; 0xbe <led_screen_init>
	count = 0;
 20a:	10 92 0f 01 	sts	0x010F, r1
 20e:	10 92 0e 01 	sts	0x010E, r1
 212:	08 95       	ret

00000214 <loop_rx>:

void loop_rx()
{
	//uint8_t data[DATA_PAYLOAD]; // Declare the data buffer
	//while (!nrf_get(MY_ID, data)) {write_to_led(count, 0);} // Wait till we got data
	while (!check_button_click()) {write_to_led(count, 0);} // Wait till we got data
 214:	07 c0       	rjmp	.+14     	; 0x224 <loop_rx+0x10>
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	80 91 0e 01 	lds	r24, 0x010E
 21c:	90 91 0f 01 	lds	r25, 0x010F
 220:	0e 94 9c 00 	call	0x138	; 0x138 <write_to_led>
 224:	0e 94 de 00 	call	0x1bc	; 0x1bc <check_button_click>
 228:	88 23       	and	r24, r24
 22a:	a9 f3       	breq	.-22     	; 0x216 <loop_rx+0x2>
	//if (data[0]) count = data[0];
	count++;
 22c:	80 91 0e 01 	lds	r24, 0x010E
 230:	90 91 0f 01 	lds	r25, 0x010F
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	90 93 0f 01 	sts	0x010F, r25
 23a:	80 93 0e 01 	sts	0x010E, r24
 23e:	08 95       	ret

00000240 <main_rx>:
}

 240:	0e 94 01 01 	call	0x202	; 0x202 <setup_rx>
 244:	0e 94 0a 01 	call	0x214	; 0x214 <loop_rx>
 248:	fd cf       	rjmp	.-6      	; 0x244 <main_rx+0x4>

0000024a <_exit>:
 24a:	f8 94       	cli

0000024c <__stop_program>:
 24c:	ff cf       	rjmp	.-2      	; 0x24c <__stop_program>
