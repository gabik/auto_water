
rx_sleep_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000140  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fd  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000161  00000000  00000000  000003cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000054  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000181  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000003c  00000000  00000000  00000705  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  00000741  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_6>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 67 00 	call	0xce	; 0xce <main>
  78:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
#define LED_PORT PORTD
#define LED_PIN PD4

void setup()
{
	cli();
  80:	f8 94       	cli
	LED_DDR |= (1<<LED_PIN);
  82:	54 9a       	sbi	0x0a, 4	; 10
	LED_PORT &= ~(1<<LED_PIN);
  84:	5c 98       	cbi	0x0b, 4	; 11
	MCUSR = 0;
  86:	14 be       	out	0x34, r1	; 52
	WDTCSR = (1<<WDCE) | (1<<WDE);
  88:	e0 e6       	ldi	r30, 0x60	; 96
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	80 83       	st	Z, r24
	WDTCSR = (1<<WDIE) | (1<<WDP2) | (1<<WDP0);
  90:	85 e4       	ldi	r24, 0x45	; 69
  92:	80 83       	st	Z, r24
	sei();	
  94:	78 94       	sei
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  96:	83 b7       	in	r24, 0x33	; 51
  98:	81 7f       	andi	r24, 0xF1	; 241
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
  9e:	83 b7       	in	r24, 0x33	; 51
  a0:	81 60       	ori	r24, 0x01	; 1
  a2:	83 bf       	out	0x33, r24	; 51
  a4:	08 95       	ret

000000a6 <__vector_6>:
}

ISR(WDT_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	LED_PORT |= (1<<LED_PIN);
  b2:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	81 e2       	ldi	r24, 0x21	; 33
  b6:	8a 95       	dec	r24
  b8:	f1 f7       	brne	.-4      	; 0xb6 <__vector_6+0x10>
  ba:	00 00       	nop
	_delay_us(100);
	LED_PORT &= ~(1<<LED_PIN);
  bc:	5c 98       	cbi	0x0b, 4	; 11
	sei();
  be:	78 94       	sei
	sleep_cpu();
  c0:	88 95       	sleep
}
  c2:	8f 91       	pop	r24
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <main>:

int main(void)
{
	setup();
  ce:	0e 94 40 00 	call	0x80	; 0x80 <setup>
	sleep_cpu();
  d2:	88 95       	sleep
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	08 95       	ret

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
