
auto_water.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000024c  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001a7  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000019f  00000000  00000000  000005c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000078  00000000  00000000  00000768  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001ae  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000015f  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  00000aed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	2f d0       	rcall	.+94     	; 0x8a <main>
  2c:	6f c0       	rjmp	.+222    	; 0x10c <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <setup_adc>:
void setup_adc()
{
	    // AREF = AVcc with Cap on Aref
	    //ADMUX |= (1<<REFS0);
	    // ADC Enable and prescaler of 16 (1M/16=62.5K)
	    ADCSRA |= (1<<ADEN)|(1<<ADPS2);
  30:	86 b1       	in	r24, 0x06	; 6
  32:	84 68       	ori	r24, 0x84	; 132
  34:	86 b9       	out	0x06, r24	; 6
  36:	08 95       	ret

00000038 <adc_read>:
}

uint16_t adc_read(uint8_t ch)
{
	ch &= 0b00000011;
	ADMUX = (ADMUX & 0xFC)|ch; // clears the bottom 2 bits before ORing
  38:	97 b1       	in	r25, 0x07	; 7
	    ADCSRA |= (1<<ADEN)|(1<<ADPS2);
}

uint16_t adc_read(uint8_t ch)
{
	ch &= 0b00000011;
  3a:	83 70       	andi	r24, 0x03	; 3
	ADMUX = (ADMUX & 0xFC)|ch; // clears the bottom 2 bits before ORing
  3c:	9c 7f       	andi	r25, 0xFC	; 252
  3e:	98 2b       	or	r25, r24
  40:	97 b9       	out	0x07, r25	; 7
	// start single convertion
	ADCSRA |= (1<<ADSC);
  42:	36 9a       	sbi	0x06, 6	; 6
	// wait for conversion to complete, ADSC becomes ’0? again
	while(ADCSRA & (1<<ADSC));
  44:	36 99       	sbic	0x06, 6	; 6
  46:	fe cf       	rjmp	.-4      	; 0x44 <__SREG__+0x5>
	return (ADC);
  48:	84 b1       	in	r24, 0x04	; 4
  4a:	95 b1       	in	r25, 0x05	; 5
}
  4c:	08 95       	ret

0000004e <get_adc_val>:

uint16_t get_adc_val(uint8_t adc_id)
{ 
  4e:	0f 93       	push	r16
  50:	1f 93       	push	r17
  52:	cf 93       	push	r28
  54:	df 93       	push	r29
  56:	08 2f       	mov	r16, r24
  58:	1a e0       	ldi	r17, 0x0A	; 10
	uint16_t total_adc = 0;
  5a:	c0 e0       	ldi	r28, 0x00	; 0
  5c:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i=0 ; i<ADC_READ_COUNTS; i++) { total_adc += adc_read(adc_id); }
  5e:	80 2f       	mov	r24, r16
  60:	eb df       	rcall	.-42     	; 0x38 <adc_read>
  62:	c8 0f       	add	r28, r24
  64:	d9 1f       	adc	r29, r25
  66:	11 50       	subi	r17, 0x01	; 1
  68:	d1 f7       	brne	.-12     	; 0x5e <get_adc_val+0x10>
	return (uint16_t)(total_adc / ADC_READ_COUNTS);
  6a:	ce 01       	movw	r24, r28
  6c:	6a e0       	ldi	r22, 0x0A	; 10
  6e:	70 e0       	ldi	r23, 0x00	; 0
  70:	39 d0       	rcall	.+114    	; 0xe4 <__udivmodhi4>
  72:	cb 01       	movw	r24, r22
}
  74:	df 91       	pop	r29
  76:	cf 91       	pop	r28
  78:	1f 91       	pop	r17
  7a:	0f 91       	pop	r16
  7c:	08 95       	ret

0000007e <get_level>:

bool get_level() 
{ 
	// If HIGH, we have no water
	if (PINB & (1<<PIN_LEV)) 
  7e:	86 b3       	in	r24, 0x16	; 22
  80:	82 95       	swap	r24
  82:	81 70       	andi	r24, 0x01	; 1
		return false; 
	else
		return true; 
}
  84:	91 e0       	ldi	r25, 0x01	; 1
  86:	89 27       	eor	r24, r25
  88:	08 95       	ret

0000008a <main>:

int main(void)
{
	// Start ADC settings
	setup_adc();
  8a:	d2 df       	rcall	.-92     	; 0x30 <setup_adc>
	// LED and PUMP as GPIO output and set to off
	DDRB |= (1<<POUT_LED) | (1<<POUT_PUMP);
  8c:	87 b3       	in	r24, 0x17	; 23
  8e:	83 60       	ori	r24, 0x03	; 3
  90:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1<<POUT_LED);
  92:	c0 98       	cbi	0x18, 0	; 24
	PORTB &= ~(1<<POUT_PUMP);
  94:	c1 98       	cbi	0x18, 1	; 24
	// Level as input (start at HIGH)
	DDRB &= ~(1<<PIN_LEV);
  96:	bc 98       	cbi	0x17, 4	; 23
	PORTB |= (1<<PIN_LEV);
  98:	c4 9a       	sbi	0x18, 4	; 24
	
    while(1)
    {
		// Check if we have water on bucket
		if (get_level())
  9a:	f1 df       	rcall	.-30     	; 0x7e <get_level>
  9c:	88 23       	and	r24, r24
  9e:	b1 f0       	breq	.+44     	; 0xcc <main+0x42>
		{
			// If yes: Close LED
			PORTB &= ~(1<<POUT_LED);
  a0:	c0 98       	cbi	0x18, 0	; 24
			// Check if need to water soil and on/off pump
			if (get_adc_val(PIN_POT) > get_adc_val(PIN_SOIL)) PORTB |= (1<<POUT_PUMP);
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	d4 df       	rcall	.-88     	; 0x4e <get_adc_val>
  a6:	ec 01       	movw	r28, r24
  a8:	83 e0       	ldi	r24, 0x03	; 3
  aa:	d1 df       	rcall	.-94     	; 0x4e <get_adc_val>
  ac:	8c 17       	cp	r24, r28
  ae:	9d 07       	cpc	r25, r29
  b0:	10 f4       	brcc	.+4      	; 0xb6 <main+0x2c>
  b2:	c1 9a       	sbi	0x18, 1	; 24
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <main+0x2e>
			else PORTB &= ~(1<<POUT_PUMP);
  b6:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	2f e3       	ldi	r18, 0x3F	; 63
  ba:	8d e0       	ldi	r24, 0x0D	; 13
  bc:	93 e0       	ldi	r25, 0x03	; 3
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x34>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x3e>
  c8:	00 00       	nop
  ca:	e7 cf       	rjmp	.-50     	; 0x9a <main+0x10>
			_delay_ms(LOOP_WAIT);
		}
		else
		{
			// LED on
			PORTB |= (1<<POUT_LED);
  cc:	c0 9a       	sbi	0x18, 0	; 24
			// PUMP off
			PORTB &= ~(1<<POUT_PUMP);
  ce:	c1 98       	cbi	0x18, 1	; 24
  d0:	2f e3       	ldi	r18, 0x3F	; 63
  d2:	82 e4       	ldi	r24, 0x42	; 66
  d4:	9f e0       	ldi	r25, 0x0F	; 15
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x4c>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x56>
  e0:	00 00       	nop
  e2:	db cf       	rjmp	.-74     	; 0x9a <main+0x10>

000000e4 <__udivmodhi4>:
  e4:	aa 1b       	sub	r26, r26
  e6:	bb 1b       	sub	r27, r27
  e8:	51 e1       	ldi	r21, 0x11	; 17
  ea:	07 c0       	rjmp	.+14     	; 0xfa <__udivmodhi4_ep>

000000ec <__udivmodhi4_loop>:
  ec:	aa 1f       	adc	r26, r26
  ee:	bb 1f       	adc	r27, r27
  f0:	a6 17       	cp	r26, r22
  f2:	b7 07       	cpc	r27, r23
  f4:	10 f0       	brcs	.+4      	; 0xfa <__udivmodhi4_ep>
  f6:	a6 1b       	sub	r26, r22
  f8:	b7 0b       	sbc	r27, r23

000000fa <__udivmodhi4_ep>:
  fa:	88 1f       	adc	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	5a 95       	dec	r21
 100:	a9 f7       	brne	.-22     	; 0xec <__udivmodhi4_loop>
 102:	80 95       	com	r24
 104:	90 95       	com	r25
 106:	bc 01       	movw	r22, r24
 108:	cd 01       	movw	r24, r26
 10a:	08 95       	ret

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
